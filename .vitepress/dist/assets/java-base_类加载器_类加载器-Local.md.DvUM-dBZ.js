import{_ as p,C as e,c as h,o as k,j as n,G as a,ag as l,a as t}from"./chunks/framework.Ds6Eueu6.js";const r="/assets/image-20250322131349668.C8rXA83-.png",o="/assets/image-20250322131757590.BVLzF1oy.png",d="/assets/image-20250322131922781.CRpLqO70.png",g="/assets/image-20250322132131535.B1FWUlGI.png",E="/assets/image-20250322132219812.CbcITPxv.png",c="/assets/image-20250322132325110.YJ6ryykD.png",y="/assets/image-20250322132417689.DlKUjqAX.png",m="/assets/image-20250322132644686.Cr228c_c.png",u="/assets/image-20250322132812011.CocxG8Jp.png",_="/assets/image-20250322132918454.B3y8NWvh.png",F="/assets/image-20250322133624865.CGNex88i.png",C="/assets/image-20250322133718060.Chz99efr.png",A="/assets/image-20250322134257858.OIkTnKaX.png",D="/assets/image-20250322134421247.P785c6ht.png",b="/assets/image-20250322134518413.8ewRjvGC.png",f=JSON.parse('{"title":"类加载器","description":"","frontmatter":{},"headers":[],"relativePath":"java-base/类加载器/类加载器-Local.md","filePath":"java-base/类加载器/类加载器-Local.md","lastUpdated":1744131765000}'),L={name:"java-base/类加载器/类加载器-Local.md"};function S(B,s,v,P,q,T){const i=e("ArticleMetadata");return k(),h("div",null,[s[0]||(s[0]=n("h1",{id:"类加载器",tabindex:"-1"},[t("类加载器 "),n("a",{class:"header-anchor",href:"#类加载器","aria-label":'Permalink to "类加载器"'},"​")],-1)),a(i),s[1]||(s[1]=n("h1",{id:"一、概念",tabindex:"-1"},[t("一、概念 "),n("a",{class:"header-anchor",href:"#一、概念","aria-label":'Permalink to "一、概念"'},"​")],-1)),a(i),s[2]||(s[2]=l('<p><img src="'+r+'" alt="image-20250322131349668" loading="lazy"></p><p>类加载器（ClassLoader）是 <strong><mark>Java 虚拟机（JVM）用于加载类的组件</mark></strong>，它负责<strong>将字节码（<code>.class</code> 文件）加载到内存中，并转换为 <code>Class</code> 对象</strong>，以便程序使用。</p><h1 id="二、类加载的时机" tabindex="-1">二、类加载的时机 <a class="header-anchor" href="#二、类加载的时机" aria-label="Permalink to &quot;二、类加载的时机&quot;">​</a></h1>',3)),a(i),s[3]||(s[3]=l('<p><img src="'+o+'" alt="image-20250322131757590" loading="lazy"></p><p><strong>类加载时机</strong></p><p>简单理解：字节码文件什么时候会被加载到内存中？</p><p>有以下的几种情况：</p><ul><li>创建类的实例（对象）</li><li>调用类的类方法</li><li>访问类或者接口的类变量，或者为该类变量赋值</li><li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li><li>初始化某个类的子类</li><li>直接使用java.exe命令来运行某个主类</li></ul><p>总结而言：<strong>用到了就加载，不用不加载</strong></p><h1 id="三、类加载的过程" tabindex="-1">三、类加载的过程 <a class="header-anchor" href="#三、类加载的过程" aria-label="Permalink to &quot;三、类加载的过程&quot;">​</a></h1>',7)),a(i),s[4]||(s[4]=l('<p><img src="'+d+'" alt="image-20250322131922781" loading="lazy"></p><p>Java 类的加载过程主要分为以下几个阶段：</p><ol><li><strong>加载（Loading）</strong><ul><li>通过类的全限定名（如 <code>com.example.MyClass</code>）查找 <code>.class</code> 文件，并读取其字节码，最终转换为 <code>Class</code> 对象。</li></ul></li><li><strong>链接（Linking）</strong><ul><li><strong>验证（Verification）：</strong> 确保字节码符合 JVM 规范，保证安全性。</li><li><strong>准备（Preparation）：</strong> 为静态变量分配内存，并赋默认值（如 <code>int</code> 默认 0）。</li><li><strong>解析（Resolution）：</strong> 将符号引用转换为直接引用（指向方法区的实际地址）。</li></ul></li><li><strong>初始化（Initialization）</strong><ul><li>执行类的静态初始化代码（<code>static {}</code> 块、静态变量的赋值）。</li></ul></li></ol><h2 id="_1、加载" tabindex="-1">1、加载 <a class="header-anchor" href="#_1、加载" aria-label="Permalink to &quot;1、加载&quot;">​</a></h2><p><img src="'+g+'" alt="image-20250322132131535" loading="lazy"></p><ul><li>通过包名 + 类名，获取这个类，准备用流进行传输</li><li>在这个类加载到内存中</li><li>加载完毕创建一个class对象</li></ul><p><img src="'+E+'" alt="image-20250322132219812" loading="lazy"></p><h2 id="_2、链接" tabindex="-1">2、链接 <a class="header-anchor" href="#_2、链接" aria-label="Permalink to &quot;2、链接&quot;">​</a></h2><h3 id="_1-验证" tabindex="-1">（1）验证 <a class="header-anchor" href="#_1-验证" aria-label="Permalink to &quot;（1）验证&quot;">​</a></h3><p>确保Class文件字节流中包含的信息<strong>符合当前虚拟机的要求</strong>，并且不会危害虚拟机自身安全</p><p>(文件中的信息是否符合虚拟机规范有没有安全隐患)</p><p><img src="'+c+'" alt="image-20250322132325110" loading="lazy"></p><h3 id="_2-准备" tabindex="-1">（2）准备 <a class="header-anchor" href="#_2-准备" aria-label="Permalink to &quot;（2）准备&quot;">​</a></h3><ul><li>负责为类的类变量（被static修饰的变量）分配内存</li><li>并<strong>设置默认初始化值</strong> (<strong><mark>只会初始化静态变量</mark></strong>) <strong>null 等其他默认初始化值</strong></li></ul><p><img src="'+y+'" alt="image-20250322132417689" loading="lazy"></p><h3 id="_3-解析" tabindex="-1">（3）解析 <a class="header-anchor" href="#_3-解析" aria-label="Permalink to &quot;（3）解析&quot;">​</a></h3><ul><li>将类的二进制数据流中的<strong>符号引用替换为直接引用</strong></li><li>(本类中如果用到了其他类，此时就需要找到对应的类)</li></ul><p><img src="'+m+'" alt="image-20250322132644686" loading="lazy"></p><p><img src="'+u+'" alt="image-20250322132812011" loading="lazy"></p><h2 id="_3、初始化" tabindex="-1">3、初始化 <a class="header-anchor" href="#_3、初始化" aria-label="Permalink to &quot;3、初始化&quot;">​</a></h2><ul><li><p>根据程序员<strong>通过程序制定的主观计划</strong>去<mark>初始化类变量和其他资源</mark></p></li><li><p><strong>(静态变量赋值以及初始化其他资源)</strong></p></li></ul><p><img src="'+_+'" alt="image-20250322132918454" loading="lazy"></p><h2 id="_4、小结" tabindex="-1">4、小结 <a class="header-anchor" href="#_4、小结" aria-label="Permalink to &quot;4、小结&quot;">​</a></h2><ul><li>当一个类被使用的时候，才会加载到内存</li><li>类加载的过程: 加载、验证、准备、解析、初始化</li></ul><p><img src="'+F+'" alt="image-20250322133624865" loading="lazy"></p><h1 id="四、类加载器的分类" tabindex="-1">四、类加载器的分类 <a class="header-anchor" href="#四、类加载器的分类" aria-label="Permalink to &quot;四、类加载器的分类&quot;">​</a></h1>',26)),a(i),s[5]||(s[5]=l('<p><img src="'+C+`" alt="image-20250322133718060" loading="lazy"></p><ul><li><p>分类</p><ul><li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li><li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li><li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li></ul></li><li><p>类加载器的继承关系</p><ul><li>System的父加载器为Platform</li><li>Platform的父加载器为Bootstrap</li></ul></li><li><p>代码演示</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassLoaderDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader systemClassLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取系统类加载器的父加载器 --- 平台类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader classLoader1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> systemClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取平台类加载器的父加载器 --- 启动类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader classLoader2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;系统类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> systemClassLoader);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;平台类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;启动类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>Java 的类加载器可分为<strong>三种主要类型</strong>：</p><ol><li><strong>Bootstrap ClassLoader（启动类加载器）</strong><ul><li>加载 JDK 的核心类，如 <code>java.lang.*</code>、<code>javax.*</code>（从 <code>lib</code> 目录的 <code>rt.jar</code> 加载）。</li><li>由 C++ 代码实现，不是 <code>ClassLoader</code> 的子类。</li></ul></li><li><strong>Extension ClassLoader（扩展类加载器）</strong><ul><li>加载 <code>lib/ext</code> 目录或 <code>java.ext.dirs</code> 指定的 JAR 包。</li><li>由 <code>sun.misc.Launcher$ExtClassLoader</code> 负责加载。</li></ul></li><li><strong>Application ClassLoader（应用类加载器）</strong><ul><li>加载用户应用的类，即 <code>classpath</code> 目录下的 <code>.class</code> 文件。</li><li>由 <code>sun.misc.Launcher$AppClassLoader</code> 负责加载。</li></ul></li></ol><p>此外，还可以自定义 <code>ClassLoader</code> 以实现特殊的类加载方式（如热部署、动态代理）。</p><h1 id="五、双亲委派模型-向上委托" tabindex="-1">五、<mark>双亲委派模型</mark>-向上委托 <a class="header-anchor" href="#五、双亲委派模型-向上委托" aria-label="Permalink to &quot;五、==双亲委派模型==-向上委托&quot;">​</a></h1>`,6)),a(i),s[6]||(s[6]=l('<p><strong>Parent Delegation Model</strong></p><p><strong>介绍</strong></p><p>如果一个<strong>类加载器收到了类加载请求，它并不会自己先去加载</strong>，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则<strong>进一步向上委托，依次递归</strong>，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，<strong><mark>倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载</mark></strong>，这就是<strong>双亲委派模式</strong></p><p><img src="'+A+`" alt="image-20250322134257858" loading="lazy"></p><p><strong>代码演示</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassLoaderDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader systemClassLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取系统类加载器的父加载器 --- 平台类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader classLoader1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> systemClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取平台类加载器的父加载器 --- 启动类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader classLoader2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getParent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;系统类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> systemClassLoader);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;平台类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;启动类加载器&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> classLoader2);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>结果</strong></p><p><img src="`+D+'" alt="image-20250322134421247" loading="lazy"></p><h1 id="六、classloader的两种方法" tabindex="-1">六、ClassLoader的两种方法 <a class="header-anchor" href="#六、classloader的两种方法" aria-label="Permalink to &quot;六、ClassLoader的两种方法&quot;">​</a></h1>',9)),a(i),s[7]||(s[7]=l('<p><img src="'+b+`" alt="image-20250322134518413" loading="lazy"></p><ul><li><p>方法介绍</p><table tabindex="0"><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static ClassLoader getSystemClassLoader()</td><td>获取系统类加载器</td></tr><tr><td>public InputStream getResourceAsStream(String name)</td><td>加载某一个资源文件</td></tr></tbody></table></li><li><p>示例代码</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassLoaderDemo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IOException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //获取系统类加载器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ClassLoader systemClassLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSystemClassLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //利用加载器去加载一个指定的文件</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //返回值：字节流。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        InputStream is </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> systemClassLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceAsStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prop.properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Properties prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        prop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(is);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prop);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        is.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,2))])}const I=p(L,[["render",S]]);export{f as __pageData,I as default};
