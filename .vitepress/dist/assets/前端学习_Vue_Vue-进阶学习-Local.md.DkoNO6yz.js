import{_ as e,C as k,c as d,o as r,j as a,G as n,ag as i,a as l,t as E}from"./chunks/framework.Ds6Eueu6.js";const g="/assets/image-20230925094426687.D_-TSENJ.png",o="/assets/image-20230925094630147.BF5dQg9R.png",y="/assets/image-20230925100950987.XlutGuGS.png",c="/assets/image-20230925101106692.0FULOlay.png",F="/assets/image-20230925101202363.C2_5XN3v.png",m="/assets/image-20230925101317873.kGz7WK_W.png",u="/assets/image-20230925103418213.D7bXVn3F.png",C="/assets/image-20230925103813210.iX_rrfov.png",b="/assets/image-20230925103913672.BYvhCbjG.png",B="/assets/image-20230925111404674.Bjlg-XYI.png",A="/assets/image-20230925111739838.B6jn6S67.png",D="/assets/image-20230925112435816.DnbpU-0a.png",_="/assets/image-20230925112514956.BjfyVRTc.png",v="/assets/image-20230925112600375.DUZdD7tK.png",x="/assets/image-20230925112635467.CmMAFjLm.png",q="/assets/image-20230925112806943.BxNnYT1-.png",f="/assets/image-20230925113501390.Dhyl6_Zq.png",P="/assets/image-20230925142650279.DOP5-ViI.png",z="/assets/image-20230925142705351.D8JzpeJW.png",j="/assets/image-20230925142957238.BevJ03JS.png",T="/assets/image-20230925144015768.DklqPeUk.png",V="/assets/image-20230925144400285.DmiccysP.png",S="/assets/image-20230925143537869.srX9y17H.png",w="/assets/image-20230925153930006.BBveRU5C.png",N="/assets/image-20230925153854881.Cet2JGRt.png",I="/assets/image-20230925154346635.BQYaf96i.png",U="/assets/image-20240827224336176.CBxd19sb.png",M="/assets/image-20230925160657497.ChJyFA6l.png",R="/assets/image-20230925160730746.DWJELk8E.png",J="/assets/image-20230926094537147._tWmMWCl.png",L="/assets/image-20230926102311897.BYvpmHAQ.png",H="/assets/image-20230926103114922.BL9_haUI.png",O="/assets/image-20230926112525531.DcOl5Mnw.png",Q="/assets/image-20230926112649750._mbsEo5-.png",$="/assets/image-20230926112830756.DSvnVNw2.png",W="/assets/image-20230926142314810.CtwZXYCx.png",Y="/assets/image-20230926145235469.CsMdWUrx.png",G="/assets/image-20230926145349976.ChZ8tKWV.png",K="/assets/image-20230926145517782.DurRWwmM.png",X="/assets/image-20230926145634149.CVHVEntj.png",Z="/assets/image-20230926145813932.p5ylQ1Um.png",ss="/assets/image-20230926150816090.CLz2OR52.png",is="/assets/image-20230926150946103.kV6mLFS8.png",as="/assets/image-20230926151839881.CWmQHjXO.png",ts="/assets/image-20230926152034526.zwHUQrt8.png",ns="/assets/image-20230926152222634.BStTo2gP.png",ls="/assets/image-20231009112322302.x2-wrxRv.png",ps="/assets/image-20231009112436925.aDHBCLTD.png",hs="/assets/image-20231009154944721.CJSDT0qI.png",es="/assets/image-20231010103544159.fBNIkYBl.png",ks="/assets/image-20231011101828271.DAK3f99A.png",ds="/assets/image-20231011102024084.BJjS19xG.png",rs="/assets/image-20231011102341145.BfToaiYQ.png",Es="/assets/image-20231011104301458.DfWUFUOR.png",gs="/assets/image-20231012100658784.Bf_UDql_.png",os="/assets/image-20231012104130496.s-1L4Xwx.png",ys="/assets/image-20231012114155894.DC8MDAjC.png",cs="/assets/image-20231016094210211.CU_xk5V6.png",Fs="/assets/image-20231016094354605.v5wvRWwN.png",ms="/assets/image-20231016094612536.DRmUxClX.png",us="/assets/image-20231016094930398.C0sTU2Bq.png",Cs="/assets/image-20231016095018274.DgcJ0Vqv.png",bs="/assets/image-20231016095152184.CMjRbBX1.png",Bs="/assets/image-20231016095540340.D3LwR6U-.png",As="/assets/image-20231016100031134.Bv3Y8gef.png",Ds="/assets/image-20231016100300675.CwivV_Ne.png",_s="/assets/image-20231016100327628.D99in-Ie.png",vs="/assets/image-20231016103554407.EHg9bJFq.png",xs="/assets/image-20231016154949134.DTdjB-kE.png",qs="/assets/image-20231016155041179.BYHOwq44.png",fs="/assets/image-20231016155124396.Chh96J_w.png",Ps="/assets/image-20231016155246041.y2BZbxNB.png",zs="/assets/image-20231016155426898.DATnPc9o.png",js="/assets/image-20231016155558430.CCefr0Kz.png",Ts="/assets/image-20231016152210849.Bl26CCP7.png",p="/assets/image-20231017105355195.sFeyK358.png",Vs="/assets/image-20231017162453327.CxtWfPRX.png",Ss="/assets/image-20231017162515941.CYHgu944.png",ws="/assets/image-20231017162553386.bu_FL3dp.png",Ns="/assets/image-20231017162651760.Czhqu7bv.png",Is="/assets/image-20231017162927506.C3UFI3Ie.png",Us="/assets/image-20231017162808963.DGuoo0ZM.png",Ms="/assets/image-20231017163005227.5_LXLwxU.png",Rs="/assets/image-20231017163116948.Cl6IcET4.png",Js="/assets/image-20231018153123546.CfawjqNn.png",Ls="/assets/image-20231018153201351.DPzoHcOA.png",Hs="/assets/image-20231018153639687.Cr2jAflA.png",Os="/assets/image-20231018154041788.Dpij5E72.png",Qs="/assets/image-20231018154225861.Dw88XUyj.png",$s="/assets/image-20231018154415419.DLsap650.png",Ws="/assets/image-20231018154443989.DVTFa8QU.png",Ys="/assets/image-20231018154601719.D0hR42sr.png",Gs="/assets/image-20231019100236805.DFa322IU.png",Ks="/assets/image-20231020143129575.C-OClVB2.png",Xs="/assets/image-20231020153003427.zSFJOYv-.png",Zs="/assets/image-20231020153413719.DHIqwvvn.png",si="/assets/image-20231020153956869.Cr514n79.png",ii="/assets/image-20231020154449782.Dfd3oBMh.png",ai="/assets/image-20231020154747092.CQDmDhwx.png",ti="/assets/image-20231020154909513.DePn2vmx.png",ni="/assets/image-20231020155054149.DyOwjm3f.png",li="/assets/image-20231020155113565.C4IUzMUn.png",pi="/assets/image-20231020155235487.C-m2W010.png",hi="/assets/image-20231020155347403.cQWtO5Bj.png",ei="/assets/image-20231020155526957.B3hBUlIg.png",ki="/assets/image-20231020155637956.DKcSN834.png",di="/assets/image-20231020155734122.DQWu6VpF.png",ri="/assets/image-20231020155812305.C3pdtEJf.png",Ei="/assets/image-20231020155938508.CgyP382v.png",gi="/assets/image-20231023094228836.Dzw5-EhQ.png",oi="/assets/image-20231023095123819.DKF34MW6.png",yi="/assets/image-20231023095249208.CAR_etZk.png",ci="/assets/image-20231023095322300.D1OQlQ91.png",Fi="/assets/image-20231023095630819.Bu9UmgLU.png",mi="/assets/image-20231023095730185.Ro9MaJFs.png",ui="/assets/image-20231023100008708.DHA6M34M.png",Ci="/assets/image-20231023142125944.CImjwelw.png",bi="/assets/image-20231023163921668.C8YFfTFr.png",Bi="/assets/image-20231023164110268.BimF2bwf.png",Ai="/assets/image-20231023164255891.dCAcCroF.png",Di="/assets/image-20231023165937804.Cc9ym0SZ.png",_i="/assets/image-20231023170202159.C70cn1ai.png",vi="/assets/image-20231023170312864.g3Iqw6zl.png",xi="/assets/image-20231023170440585.j_zQctdq.png",qi="/assets/image-20231023170612705.DnvsV10q.png",fi="/assets/image-20231023170710212.Cn4BVcZf.png",Pi="/assets/image-20231023170832442.e2lgl3bx.png",zi="/assets/image-20231025113638867.BRXnaDZK.png",ji="/assets/image-20231025113707572.c02ax3di.png",Ti="/assets/image-20231026101005983.rQ4zmbmG.png",Vi="/assets/image-20231026101037315.DI1SLTNn.png",Si="/assets/image-20231026101135442.Du0IbZ10.png",wi="/assets/2883139-20240202224517457-1449501949.C2apR8Aa.png",Ni="/assets/2883139-20240202224518015-1696008038.DfOnAnIn.png",Ii="/assets/2883139-20240202224518442-811187715.jDOoetRR.png",Ui="/assets/2883139-20240202224519111-1315815885.Vh5G1d0A.png",Mi="/assets/2883139-20240202224519481-1123754033.CZlYLde-.png",Ri="/assets/2883139-20240202224519932-639034536.CUoALhBi.png",Ji="/assets/2883139-20240202224520489-2101089879.HyB9EIk-.png",Li="/assets/2883139-20240202224520880-657070733.BnGOOkCs.png",Hi="/assets/2883139-20240326110949684-1417340981.B5Ef7NSj.png",Oi="/assets/2883139-20240202224521734-2133276040.CIjX8fKj.png",Qi="/assets/2883139-20240202224522142-98357226.aDquY3Y9.png",$i="/assets/2883139-20240202224521266-1240624336.BWtpozvs.png",Wi="/assets/2883139-20240202224522486-1074673816.a-Z_bhL2.png",Yi="/assets/2883139-20240202224522803-240960905.BuBrxH3n.png",Gi="/assets/2883139-20240202224523131-155785595.WN_dZd8J.png",Ki="/assets/2883139-20240202224523480-819844066.BIlQN-sq.png",Xi="/assets/2883139-20240202224523823-251045790.O9oc3TVk.png",Zi="/assets/2883139-20240202224524190-743366549.ClDkao6S.png",sa="/assets/2883139-20240202224524559-856280039.fJ2UFc2t.png",ia="/assets/2883139-20240202224524993-67991871.CvcciJeH.png",aa="/assets/2883139-20240202224525845-165962797.2D_Vy_du.png",ta="/assets/2883139-20240202224526247-1334937302.DTjIKQLt.png",na="/assets/2883139-20240202224526680-1616470130.Dk1Yy5-e.png",Ea=JSON.parse('{"title":"一、vue基础回顾+进阶","description":"","frontmatter":{},"headers":[],"relativePath":"前端学习/Vue/Vue-进阶学习-Local.md","filePath":"前端学习/Vue/Vue-进阶学习-Local.md","lastUpdated":1744204135000}'),la={name:"前端学习/Vue/Vue-进阶学习-Local.md"};function pa(h,s,ha,ea,ka,da){const t=k("ArticleMetadata");return r(),d("div",null,[s[0]||(s[0]=a("h1",{id:"一、vue基础回顾-进阶",tabindex:"-1"},[l("一、vue基础回顾+进阶 "),a("a",{class:"header-anchor",href:"#一、vue基础回顾-进阶","aria-label":'Permalink to "一、vue基础回顾+进阶"'},"​")],-1)),n(t),s[1]||(s[1]=i('<h2 id="课程内容" tabindex="-1">课程内容 <a class="header-anchor" href="#课程内容" aria-label="Permalink to &quot;课程内容&quot;">​</a></h2><ul><li>VUE 基础回顾</li><li>路由 Vue-Router</li><li>状态管理 vuex</li><li>TypeScript</li></ul><h2 id="_1-vue-基础回顾" tabindex="-1">1. VUE 基础回顾 <a class="header-anchor" href="#_1-vue-基础回顾" aria-label="Permalink to &quot;1. VUE 基础回顾&quot;">​</a></h2><h3 id="_1-1-基于脚手架创建前端工程" tabindex="-1">1.1 基于脚手架创建前端工程 <a class="header-anchor" href="#_1-1-基于脚手架创建前端工程" aria-label="Permalink to &quot;1.1 基于脚手架创建前端工程&quot;">​</a></h3><h4 id="_1-1-1-环境要求" tabindex="-1">1.1.1 环境要求 <a class="header-anchor" href="#_1-1-1-环境要求" aria-label="Permalink to &quot;1.1.1 环境要求&quot;">​</a></h4><p>要想基于脚手架创建前端工程，需要具备如下环境要求：</p><ul><li>​ <strong>node.js</strong> 前端项目的运行环境</li><li>​ <strong>npm</strong> JavaScript的包管理工具</li><li>​ <strong>Vue CLI</strong> 基于Vue进行快速开发的完整系统，实现交互式的<strong>项目脚手架</strong></li></ul><p>安装完node.js后，可以通过命令行来查看版本号，如下：</p><p><img src="'+g+'" alt="image-20230925094426687" loading="lazy"></p><p>安装 Vue CLI，命令如下：</p><p><img src="'+o+'" alt="image-20230925094630147" loading="lazy"></p><h4 id="_1-1-2-操作过程" tabindex="-1">1.1.2 操作过程 <a class="header-anchor" href="#_1-1-2-操作过程" aria-label="Permalink to &quot;1.1.2 操作过程&quot;">​</a></h4><p>使用 Vue CLI 创建前端工程的方式：</p><ul><li>​ 方式一：vue create 项目名称</li><li>​ 方式二：vue ui</li></ul><p>重点介绍使用 vue ui 命令创建前端工程的过程：</p><p>第一步：在命令行输入命令 vue ui,在浏览器ui界面中选择前端工程存放的位置</p><p><img src="'+y+'" alt="image-20230925100950987" loading="lazy"></p><p>第二步：点击“在此创建新项目”按钮，跳转到创建新项目设置页面</p><p><img src="'+c+'" alt="image-20230925101106692" loading="lazy"></p><p>第三步：填写项目名称、选择包管理器为npm，点击“下一步”按钮</p><p><img src="'+F+'" alt="image-20230925101202363" loading="lazy"></p><p>第四步：选择 Default(Vue 2)，点击&quot;创建项目&quot;按钮，完成项目的创建</p><p><img src="'+m+'" alt="image-20230925101317873" loading="lazy"></p><h4 id="_1-1-3-工程结构" tabindex="-1">1.1.3 <mark>工程结构</mark> <a class="header-anchor" href="#_1-1-3-工程结构" aria-label="Permalink to &quot;1.1.3 ==工程结构==&quot;">​</a></h4><p>工程目录结构：</p><p><img src="'+u+'" alt="image-20230925103418213" loading="lazy"></p><p><mark>重点文件或目录介绍</mark>：</p><ul><li><strong>node_modules：当前项目依赖的js包</strong></li><li><strong>assets：静态资源存放目录</strong></li><li><strong>components：公共组件存放目录</strong></li><li><strong>App.vue：项目的主组件，页面的入口文件</strong></li><li><strong>main.js：整个项目的入口文件</strong></li><li><strong>package.json：项目的配置信息、依赖包管理</strong></li><li><strong>vue.config.js：vue-cli配置文件</strong></li></ul><h4 id="_1-1-4-启动前端服务" tabindex="-1">1.1.4 启动前端服务 <a class="header-anchor" href="#_1-1-4-启动前端服务" aria-label="Permalink to &quot;1.1.4 启动前端服务&quot;">​</a></h4><p>使用VS Code打开创建的前端工程，启动前端工程：</p><p><img src="'+C+'" alt="image-20230925103813210" loading="lazy"></p><p>访问前端工程：</p><p><img src="'+b+`" alt="image-20230925103913672" loading="lazy"></p><p>注：要停止前端服务，可以在命令行终端使用 ctrl + C</p><p>前端项目启动后，服务端口默认为8080，很容易和后端tomcat端口号冲突。如何修改前端服务的端口号？</p><p>可以在vue.config.js中配置前端服务端口号：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@vue/cli-service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transpileDependencies: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7070</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //指定前端服务端口号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="_1-2-vue基本使用方式" tabindex="-1">1.2 vue基本使用方式 <a class="header-anchor" href="#_1-2-vue基本使用方式" aria-label="Permalink to &quot;1.2 vue基本使用方式&quot;">​</a></h3><p>本章节从如下几个方面进行vue回顾：</p><ul><li>vue 组件</li><li>文本插值</li><li>属性绑定</li><li>事件绑定</li><li>双向绑定</li><li>条件渲染</li><li>axios</li></ul><h4 id="_1-2-1-vue-组件" tabindex="-1">1.2.1 vue 组件 <a class="header-anchor" href="#_1-2-1-vue-组件" aria-label="Permalink to &quot;1.2.1 vue 组件&quot;">​</a></h4><p>Vue 的组件文件以 .vue 结尾，每个组件由三部分组成：</p><ul><li>结构 <code>&lt;template&gt;</code></li><li>样式 <code>&lt;style&gt;</code></li><li>逻辑 <code>&lt;script&gt;</code></li></ul><p><img src="`+B+'" alt="image-20230925111404674" loading="lazy"></p><h4 id="_1-2-2-文本插值" tabindex="-1">1.2.2 文本插值 <a class="header-anchor" href="#_1-2-2-文本插值" aria-label="Permalink to &quot;1.2.2 文本插值&quot;">​</a></h4><p>作用：用来绑定 data 方法返回的对象属性</p>',46)),a("p",null,"用法："+E(h.插值表达式),1),s[2]||(s[2]=i('<p>示例：</p><p><img src="'+A+'" alt="image-20230925111739838" loading="lazy"></p><h4 id="_1-2-3-属性绑定" tabindex="-1">1.2.3 属性绑定 <a class="header-anchor" href="#_1-2-3-属性绑定" aria-label="Permalink to &quot;1.2.3 属性绑定&quot;">​</a></h4><p>作用：<strong>为标签的属性绑定 data 方法中返回的属性</strong></p><p>用法：v-bind:xxx，简写为 :xxx</p><p>示例：</p><p><img src="'+D+'" alt="image-20230925112435816" loading="lazy"></p><h4 id="_1-2-4-事件绑定" tabindex="-1">1.2.4 事件绑定 <a class="header-anchor" href="#_1-2-4-事件绑定" aria-label="Permalink to &quot;1.2.4 事件绑定&quot;">​</a></h4><p>作用：为元素绑定对应的事件</p><p>用法：v-on:xxx，简写为 @xxx</p><p>示例：</p><p><img src="'+_+'" alt="image-20230925112514956" loading="lazy"></p><h4 id="_1-2-5-双向绑定" tabindex="-1">1.2.5 双向绑定 <a class="header-anchor" href="#_1-2-5-双向绑定" aria-label="Permalink to &quot;1.2.5 双向绑定&quot;">​</a></h4><p>作用：<strong>表单输入项和 data 方法中的属性进行绑定，任意一方改变都会同步给另一方</strong></p><p>用法：v-model</p><p>示例：</p><p><img src="'+v+'" alt="image-20230925112600375" loading="lazy"></p><h4 id="_1-2-6-条件渲染" tabindex="-1">1.2.6 条件渲染 <a class="header-anchor" href="#_1-2-6-条件渲染" aria-label="Permalink to &quot;1.2.6 条件渲染&quot;">​</a></h4><p>作用：根据表达式的值来动态渲染页面元素</p><p>用法：v-if、v-else、v-else-if</p><p>示例：</p><p><img src="'+x+'" alt="image-20230925112635467" loading="lazy"></p><h4 id="_1-2-7-axios" tabindex="-1">1.2.7 <mark>axios</mark> <a class="header-anchor" href="#_1-2-7-axios" aria-label="Permalink to &quot;1.2.7 ==axios==&quot;">​</a></h4><p><a href="https://www.axios-http.cn/" target="_blank" rel="noreferrer">Axios</a> 是一个基于 promise 的 网络请求库，作用于浏览器和 node.js 中。使用Axios可以在前端项目中发送各种方式的HTTP请求。</p><p><mark>安装命令</mark>：<strong>npm install axios</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> axios</span></span></code></pre></div><p>导入：import axios from &#39;axios&#39;</p><p>axios 的 API 列表：</p><p><img src="'+q+`" alt="image-20230925112806943" loading="lazy"></p><p>参数说明：</p><ul><li>url：请求路径</li><li>data：请求体数据，最常见的是JSON格式数据</li><li>config：配置对象，可以设置查询参数、请求头信息</li></ul><p>注：在使用axios时，经常会遇到<strong>跨域问题</strong>。为了解决跨域问题，可以在 <strong>vue.config.js 文件中配置代理</strong>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;@vue/cli-service&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transpileDependencies: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  devServer: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    port: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7070</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    proxy: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://localhost:8080&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>axios的post请求示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/admin/employee/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      username:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error.response)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><p>axios的get请求示例：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">axios.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/admin/shop/status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          token: ‘xxx.yyy.zzz’</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span></code></pre></div><p>axios提供的统一使用方式示例一（可以发送各种方式的请求）：</p><p><img src="`+f+`" alt="image-20230925113501390" loading="lazy"></p><p>axios提供的统一使用方式示例二（可以发送各种方式的请求）：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/admin/employee/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      method:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        username:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data.data.token)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/admin/shop/status&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;get&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        params: {id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        headers: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          token: res.data.data.token</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(error)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span></code></pre></div><h2 id="_2-路由-vue-router" tabindex="-1">2. <mark>路由 Vue-Router</mark> <a class="header-anchor" href="#_2-路由-vue-router" aria-label="Permalink to &quot;2. ==路由 Vue-Router==&quot;">​</a></h2><h3 id="_2-0-npm安装router路由" tabindex="-1">2.0 NPM安装Router路由 <a class="header-anchor" href="#_2-0-npm安装router路由" aria-label="Permalink to &quot;2.0 NPM安装Router路由&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vue-router</span></span></code></pre></div><p>如果在一个模块化工程中使用它，必须要通过 <code>Vue.use()</code> 明确地安装路由功能：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VueRouter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue-router&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VueRouter)</span></span></code></pre></div><p>如果使用全局的 script 标签，则无须如此 (手动安装)。</p><h3 id="_2-1-vue-router-介绍" tabindex="-1">2.1 Vue-Router 介绍 <a class="header-anchor" href="#_2-1-vue-router-介绍" aria-label="Permalink to &quot;2.1 Vue-Router 介绍&quot;">​</a></h3><p>vue 属于单页面应用，所谓路由，就是根据浏览器路径不同，用不同的视图组件替换这个页面内容。</p><p><img src="`+P+'" alt="image-20230925142650279" loading="lazy"></p><p><img src="'+z+'" alt="image-20230925142705351" loading="lazy"></p><p>如上图所示：不同的访问路径，对应不同的页面展示。</p><p>在vue应用中使用路由功能，需要安装Vue-Router：</p><p><img src="'+j+'" alt="image-20230925142957238" loading="lazy"></p><p>注：创建完带有路由功能的前端项目后，在工程中会生成一个路由文件，如下所示：</p><p><img src="'+T+'" alt="image-20230925144015768" loading="lazy"></p><p>关于路由的配置，主要就是在这个路由文件中完成的。</p><p>为了能够使用路由功能，在前端项目的入口文件main.js中，创建Vue实例时需要指定路由对象：</p><p><img src="'+V+'" alt="image-20230925144400285" loading="lazy"></p><h3 id="_2-2-路由配置" tabindex="-1">2.2 路由配置 <a class="header-anchor" href="#_2-2-路由配置" aria-label="Permalink to &quot;2.2 路由配置&quot;">​</a></h3><p>首先了解一下<mark>路由组成</mark>：</p><ul><li>VueRouter：路由器，根据路由请求在路由视图中动态渲染对应的视图组件</li><li><code>&lt;router-link&gt;</code>：路由链接组件，浏览器会解析成<code>&lt;a&gt;</code></li><li><code>&lt;router-view&gt;</code>：路由视图组件，用来展示与路由路径匹配的视图组件</li></ul><p><img src="'+S+`" alt="image-20230925143537869" loading="lazy"></p><p>具体配置方式：</p><ol><li>在路由文件中配置路由路径和视图的对应关系：</li></ol><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VueRouter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue-router&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HomeView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../views/HomeView.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VueRouter)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//维护路由表，某个路由路径对应哪个视图组件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> routes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;home&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    component: HomeView</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* webpackChunkName: &quot;about&quot; */</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../views/AboutView.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/404&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/404View.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    redirect: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/404&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> router</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VueRouter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  routes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router</span></span></code></pre></div><ol start="2"><li>在视图组件中配置 router-link标签，用于生成超链接</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`Home\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\` |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`About\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\` |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`Test\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\` |</span></span></code></pre></div><ol start="3"><li>在视图组件汇总配置router-view标签</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!--视图组件展示的位置--&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;\`</span></span></code></pre></div><p>要实现路由跳转，可以通过标签式和编程式两种：</p><ul><li><strong><mark>标签式</mark>：<code>&lt;router-link to=&quot;/about&quot;&gt;</code>About<code>&lt;/router-link&gt;</code></strong></li><li><strong><mark>编程式</mark>：this.$router.push(&#39;/about&#39;)</strong> ， <ul><li><strong>this.$router用来获取路由对象</strong></li><li><strong>push方法是根据url进行跳转</strong></li></ul></li></ul><p>**问题思考：**如果用户访问的路由地址不存在，该如何处理？</p><p>可以通过配置一个404视图组件，当<strong>访问的路由地址不存在</strong>时，则<strong>重定向到此视图组件</strong>，具体配置如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/404&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/404View.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;*&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    redirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/404&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //重定向</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Home&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/about&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;About&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Test&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; |</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;编程式路由跳转&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jump&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    &lt;!--视图组件展示的位置--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods:{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jump</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //使用编程式路由跳转</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/about&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">#app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-family</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Avenir, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Helvetica</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Arial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sans-serif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -webkit-font-smoothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">antialiased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  -moz-osx-font-smoothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">grayscale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#2c3e50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  font-weight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#2c3e50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">nav</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.router-link-exact-active</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#42b983</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="_2-3-嵌套路由" tabindex="-1">2.3 嵌套路由 <a class="header-anchor" href="#_2-3-嵌套路由" aria-label="Permalink to &quot;2.3 嵌套路由&quot;">​</a></h3><p>嵌套路由：组件内要切换内容，就需要用到嵌套路由（子路由），效果如下：</p><p>在App.vue视图组件中有<code>&lt;router-view&gt;</code>标签，其他视图组件可以展示在此</p><p><img src="`+w+'" alt="image-20230925153930006" loading="lazy"></p><p><strong>ContainerView.vue组件</strong>可以展示在App.vue视图组件的<code>&lt;router-view&gt;</code>位置</p><p><img src="'+N+'" alt="image-20230925153854881" loading="lazy"></p><p>ContainerView.vue组件进行了区域划分（分为上、左、右），在右边编写了<code>&lt;router-view&gt;</code>标签，点击左侧菜单时，可以将对应的子视图组件展示在此</p><p><img src="'+I+'" alt="image-20230925154346635" loading="lazy"></p><p>实现步骤：</p><p>第一步：安装并导入 <a href="https://element.eleme.io/" target="_blank" rel="noreferrer">elementui</a>，实现页面布局（Container 布局容器）---ContainerView.vue</p><p><strong>mian.js文件中导入ElementUI</strong></p><p><img src="'+U+`" alt="image-20240827224336176" loading="lazy"></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>npm i element-ui -s</span></span></code></pre></div><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> router </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./router&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ElementUI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-ui&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-ui/lib/theme-chalk/index.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.config.productionTip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//全局使用ElementUI</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementUI);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  router,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`Header\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-aside</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;200px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#B3C0D1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#D3DCE6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#E9EEF3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">260</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span></code></pre></div><p>第二步：提供子视图组件，用于效果展示 ---P1View.vue、P2View.vue、P3View.vue</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    这是P1 View</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">export default {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-footer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#B3C0D1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#D3DCE6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    background-color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#E9EEF3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    text-align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">center</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">160</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> .el-container</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">260</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  .el-container:nth-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    line-height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">320</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span></code></pre></div><p>第三步：在 src/router/index.js 中<strong>配置路由映射规则</strong>（嵌套路由配置）</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/container/ContainerView.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //嵌套路由（子路由），对应的组件会展示在当前组件内部</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    children</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//通过children属性指定子路由相关信息（path、component）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/c/p1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/container/P1View.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/c/p2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/container/P2View.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        path: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/c/p3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;../views/container/P3View.vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span></code></pre></div><p>第四步：在ContainerView.vue 布局容器视图中添加<code>&lt;router-view&gt;</code>，实现子视图组件展示</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span></code></pre></div><p>第五步：在ContainerView.vue 布局容器视图中添加<code>&lt;router-link&gt;</code>，实现路由请求</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-aside</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;200px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/c/p1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`P1\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/c/p2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`P2\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/c/p3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`P3\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">router-link</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">br</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-aside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span></code></pre></div><p>注意：子路由变化，切换的是【ContainerView 组件】中 <code>&lt;router-view&gt;&lt;/router-view&gt;</code> 部分的内容</p><p>问题思考：</p><p>1.对于前面的案例，如果用户访问的路由是 /c，会有什么效果呢？</p><p><img src="`+M+'" alt="image-20230925160657497" loading="lazy"></p><p>2.如何实现在访问 /c 时，<strong>默认就展示某个子视图组件</strong>呢？</p><p>配置重定向，当访问/c时，直接<strong>重定向到/c/p1</strong>即可，如下配置：</p><p><img src="'+R+'" alt="image-20230925160730746" loading="lazy"></p><h2 id="_3-状态管理-vuex" tabindex="-1">3. 状态管理 vuex <a class="header-anchor" href="#_3-状态管理-vuex" aria-label="Permalink to &quot;3. 状态管理 vuex&quot;">​</a></h2><h3 id="_3-1-vuex-介绍" tabindex="-1">3.1 vuex 介绍 <a class="header-anchor" href="#_3-1-vuex-介绍" aria-label="Permalink to &quot;3.1 vuex 介绍&quot;">​</a></h3><ul><li><p><strong>vuex 是一个专为 Vue.js 应用程序开发的状态管理库</strong></p></li><li><p><strong>vuex 可以在多个组件之间<mark>共享数据</mark>，并且共享的数据是<mark>响应式</mark>的，即数据的变更能及时渲染到模板</strong></p></li><li><p><strong>vuex 采用<mark>集中式存储管理</mark>所有组件的状态</strong></p></li></ul><p>每一个 Vuex 应用的核心就是 store（仓库）。“store”基本上就是一个容器，它包含着你的应用中大部分的<strong>状态 (state)</strong>。Vuex 和单纯的全局对象有以下两点不同：</p><ol><li>Vuex 的状态存储是<strong>响应式</strong>的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到<strong>高效更新</strong>。</li><li>你不能直接改变 store 中的状态。改变 store 中的状态的<strong>唯一途径</strong>就是显式地**<mark>提交 (commit) mutation</mark>**。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ol><p><strong>安装vuex</strong>：<strong>npm install vuex@next --save</strong></p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> vuex@next</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save</span></span></code></pre></div><p>vuex中的几个核心概念：</p><ul><li><p><strong>state：状态对象，<mark>集中定义各个组件共享</mark>的数据</strong></p></li><li><p><strong>mutations：类似于一个事件，用于<mark>修改共享数据</mark>，要求必须是<mark>同步函数</mark></strong></p></li><li><p><strong>actions：类似于mutation，可以包含<mark>异步操作</mark>(axios异步请求)，通过调用mutation来改变共享数据</strong></p></li></ul><h3 id="_3-2-使用方式" tabindex="-1">3.2 使用方式 <a class="header-anchor" href="#_3-2-使用方式" aria-label="Permalink to &quot;3.2 使用方式&quot;">​</a></h3><p>本章节通过一个案例来学习vuex的使用方式，具体操作步骤如下：</p><p>第一步：创建带有vuex功能的前端项目</p><p><img src="'+J+`" alt="image-20230926094537147" loading="lazy"></p><p>注：在创建的前端工程中，可以发现自动创建了vuex相关的文件(src/store/index.js)，并且在main.js中创建Vue实例时，需要将store对象传入，代码如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./App.vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> store </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./store&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.config.productionTip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  store,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//使用vuex功能</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> h</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(App)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$mount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#app&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>第二步：在src/store/index.js文件中集中定义和管理共享数据</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vuex&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> axios </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;axios&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Vuex)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//集中管理多个组件共享的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vuex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Store</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //集中定义共享数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  state: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;未登录游客&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  getters: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //通过当前属性中定义的函数修改共享数据，必须都是同步操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mutations: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //通过actions调用mutation，在actions中可以进行异步操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  actions: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  modules: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>第三步：在视图组件中展示共享数据</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    \`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`欢迎你，{{$store.state.name}}\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\`</span></span></code></pre></div><p>注：<strong><mark>$store.state</mark>为固定写法，用于访问共享数据</strong></p><p>第四步：在mutations中定义函数，用于修改共享数据</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //通过当前属性中定义的函数修改共享数据，必须都是同步操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  mutations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state,newName) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      state.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>第五步：在视图组件中调用 mutations 中定义的函数</p><p><img src="`+L+`" alt="image-20230926102311897" loading="lazy"></p><p>注：<strong>mutations</strong>中定义的函数<strong>不能直接调用</strong>，必须通过<strong>状态对象的 commit 方法来调用</strong></p><p>第六步：如果在修改共享数据的过程中有异步操作，则需要将<strong>异步操作</strong>的代码编写在<strong>actions的函数</strong>中</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //通过actions调用mutation，在actions中可以进行异步操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  actions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setNameByAxios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      axios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//异步请求</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/admin/employee/login&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;post&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;admin&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          password: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          //异步请求后，需要修改共享数据</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          //在actions中调用mutation中定义的setName函数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,res.data.data.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>注：在actions中定义的函数可以声明context参数，通过此参数可以调用mutations中定义的函数</p><p>第七步：在视图组件中调用actions中定义的函数</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;欢迎你，{{ $store.state.name }} -- App.vue&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;通过mutations修改共享数据&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleUpdate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;button&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;调用actions中的函数修改共享数据&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;handleCallAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">HelloWorld</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome to Your Vue.js App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HelloWorld </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./components/HelloWorld.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;App&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  components: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    HelloWorld</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //mutations中定义的函数不能直接调用，必须通过commit这种方式间接调用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //setName为mutations中定义的函数名称，joker为传递的参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;joker&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleCallAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //调用actions中定义的函数，setNameByAxios为函数名称</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dispatch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setNameByAxios&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><img src="`+H+'" alt="image-20230926103114922" loading="lazy"></p><p>注：在actions中定义的函数不能直接调用，必须通过 <strong>this.$store.dispatch(&#39;函数名称&#39;)</strong> 这种方式调用</p><h2 id="_4-typescript" tabindex="-1">4. TypeScript <a class="header-anchor" href="#_4-typescript" aria-label="Permalink to &quot;4. TypeScript&quot;">​</a></h2><h3 id="_4-1-typescript-介绍" tabindex="-1">4.1 TypeScript 介绍 <a class="header-anchor" href="#_4-1-typescript-介绍" aria-label="Permalink to &quot;4.1 TypeScript 介绍&quot;">​</a></h3><ul><li>TypeScript（简称：TS） 是微软推出的开源语言</li><li>TypeScript 是 JavaScript 的超集（JS 有的 TS 都有）</li></ul><p><img src="'+O+'" alt="image-20230926112525531" loading="lazy"></p><ul><li>TypeScript = Type + JavaScript（在 JS 基础上增加了类型支持）</li><li>TypeScript 文件扩展名为 ts</li><li>TypeScript 可编译成标准的 JavaScript，并且在编译时进行类型检查</li></ul><p><img src="'+Q+'" alt="image-20230926112649750" loading="lazy"></p><p>在前端项目中使用TS，需要进行安装，命令为：npm install -g typescript</p><p>查看TS版本：</p><p><img src="'+$+`" alt="image-20230926112830756" loading="lazy"></p><p>TS初体验：</p><ol><li>创建 hello.ts 文件，内容如下：</li></ol><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个函数 hello，并且指定参数类型为string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用上面的函数，传递非string类型的参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>使用 tsc 命令编译 hello.ts 文件</li></ol><p><img src="`+W+'" alt="image-20230926142314810" loading="lazy"></p><p>可以看到编译报错，提示参数类型不匹配。这说明在编译时TS会进行类型检查。需要注意的是<strong>在编译为JS文件后，类型会被擦除</strong>。</p><p>思考：TS 为什么要增加类型支持 ？</p><ul><li><strong>TS 属于静态类型编程语言，JS 属于动态类型编程语言</strong></li><li><strong>静态类型在编译期做类型检查，动态类型在执行期做类型检查</strong></li><li><strong>对于 JS 来说，需要等到代码执行的时候才能发现错误（晚）</strong></li><li><strong>对于 TS 来说，在代码编译的时候就可以发现错误（早）</strong></li><li><strong>配合 VSCode 开发工具，TS 可以提前到在编写代码的同时就发现代码中的错误，减少找 Bug、改 Bug 的时间</strong></li></ul><p>在前端项目中使用TS，需要创建基于TS的前端工程：</p><p><img src="'+Y+'" alt="image-20230926145235469" loading="lazy"></p><p><img src="'+G+'" alt="image-20230926145349976" loading="lazy"></p><h3 id="_4-2-typescript-常用类型" tabindex="-1">4.2 TypeScript <mark>常用类型</mark> <a class="header-anchor" href="#_4-2-typescript-常用类型" aria-label="Permalink to &quot;4.2 TypeScript ==常用类型==&quot;">​</a></h3><p>TS中的常用类型如下：</p><table tabindex="0"><thead><tr><th><strong>类型</strong></th><th><strong>例</strong></th><th><strong>备注</strong></th></tr></thead><tbody><tr><td>字符串类型</td><td>string</td><td></td></tr><tr><td>数字类型</td><td>number</td><td></td></tr><tr><td>布尔类型</td><td>boolean</td><td></td></tr><tr><td>数组类型</td><td>number[],string[], boolean[] 依此类推</td><td></td></tr><tr><td>任意类型</td><td>any</td><td>相当于又回到了没有类型的时代</td></tr><tr><td>复杂类型</td><td>type 与 interface</td><td></td></tr><tr><td>函数类型</td><td>() =&gt; void</td><td>对函数的参数和返回值进行说明</td></tr><tr><td>字面量类型</td><td>&quot;a&quot;|&quot;b&quot;|&quot;c&quot;</td><td>限制变量或参数的取值</td></tr><tr><td>class 类</td><td>class Animal</td><td></td></tr></tbody></table><h4 id="_4-2-1-类型标注的位置" tabindex="-1">4.2.1 类型标注的位置 <a class="header-anchor" href="#_4-2-1-类型标注的位置" aria-label="Permalink to &quot;4.2.1 类型标注的位置&quot;">​</a></h4><p>基于TS进行前端开发时，类型标注的位置有如下3个：</p><ul><li>标注变量</li><li>标注参数</li><li>标注返回值</li></ul><p><img src="'+K+'" alt="image-20230926145517782" loading="lazy"></p><h4 id="_4-2-2-字符串、数字、布尔类型" tabindex="-1">4.2.2 字符串、数字、布尔类型 <a class="header-anchor" href="#_4-2-2-字符串、数字、布尔类型" aria-label="Permalink to &quot;4.2.2 字符串、数字、布尔类型&quot;">​</a></h4><p>字符串、数字、布尔类型是前端开发中常用的类型</p><p><img src="'+X+'" alt="image-20230926145634149" loading="lazy"></p><h4 id="_4-2-3-字面量类型" tabindex="-1">4.2.3 字面量类型 <a class="header-anchor" href="#_4-2-3-字面量类型" aria-label="Permalink to &quot;4.2.3 字面量类型&quot;">​</a></h4><p><strong>字面量类型用于限定数据的取值范围</strong>，类似于java中的<strong>枚举</strong></p><p><img src="'+Z+'" alt="image-20230926145813932" loading="lazy"></p><h4 id="_4-2-4-interface-类型" tabindex="-1">4.2.4 interface 类型 <a class="header-anchor" href="#_4-2-4-interface-类型" aria-label="Permalink to &quot;4.2.4 interface 类型&quot;">​</a></h4><p>interface 类型是TS中的复杂类型，它让 TypeScript 具备了 JavaScript 所缺少的、描述较为复杂数据结构的能力。</p><p><img src="'+ss+'" alt="image-20230926150816090" loading="lazy"></p><p>可以通过在属性名后面加上？，表示当前属性为可选，如下：</p><p><img src="'+is+'" alt="image-20230926150946103" loading="lazy"></p><h4 id="_4-2-5-class-类型" tabindex="-1">4.2.5 class 类型 <a class="header-anchor" href="#_4-2-5-class-类型" aria-label="Permalink to &quot;4.2.5 class 类型&quot;">​</a></h4><p>使用 class 关键字来定义类，类中可以包含属性、构造方法、普通方法等</p><p><img src="'+as+'" alt="image-20230926151839881" loading="lazy"></p><p>在定义类时，可以使用 implments 关键字实现接口，如下：</p><p><img src="'+ts+'" alt="image-20230926152034526" loading="lazy"></p><p>在定义类时，可以使用 extends 关键字 继承其他类，如下：</p><p><img src="'+ns+`" alt="image-20230926152222634" loading="lazy"></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个函数 print，打印到控制台，并且指定参数类型为string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//调用上面的函数，传递非string类型的参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//标注变量，指定变量 msg 的类型为string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello ts!&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//标注参数和返回值，指定 m2 函数的参数类型 为string，并且返回值也为 string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> m2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowerCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> msg</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">m2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Abc &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义字符串类型的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;itcast&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义布尔类型的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isTrue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义数字类型的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isTrue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//字面量类型，指定参数 alignment 的取值只能是 left、right、center</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">alignment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;left&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;right&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;center&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s, alignment)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;left&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// printText(&#39;hello&#39;)</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //错误：取值只能是left丨right丨center</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个接口，名字为cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //加上? 表示当前属性是可选的</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义变量为cat类型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xiaobai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xiaobai&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//错误：缺少 age 属性</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//const c3: Cat = { name: &#39;xiaobai&#39;, age: 1, sex: &#39;公&#39; }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //错误：多出 sex 属性</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c1)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个类，名称为User</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //属性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//构造方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    study</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;正在学习...&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> u</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;张三&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(u.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">study</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义一个类Bird，实现上面的Animal接口</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bird</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> implements</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; eat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//创建类型为Bird的对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bird</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;杜鹃&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b1.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 1111111111111111111111111111111111111 */</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//定义Parrot类，并且继承 Bird类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parrot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bird</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    parrotName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">parrotName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(parrotName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;super&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parrotName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parrotName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; say hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sayParrotName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.parrotName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; say hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> myParrot</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parrot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Polly&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myParrot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myParrot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayParrotName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myParrot.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h1 id="二、vue知识点和工具类总结" tabindex="-1">二、Vue知识点和工具类总结 <a class="header-anchor" href="#二、vue知识点和工具类总结" aria-label="Permalink to &quot;二、Vue知识点和工具类总结&quot;">​</a></h1>`,185)),n(t),s[3]||(s[3]=i(`<h2 id="_1、vue-config-js代理配置-跨域" tabindex="-1">1、vue.config.js代理配置-<mark>跨域</mark> <a class="header-anchor" href="#_1、vue-config-js代理配置-跨域" aria-label="Permalink to &quot;1、vue.config.js代理配置-==跨域==&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//配置跨域,通常发生在前端应用和后端API服务器不在同一个域（域名、协议或端口不同）的情况下。</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///api是一个前缀，所有以/api开头的请求都会被代理到target指定的服务器。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        target: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">VUE_APP_URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ws: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 是否启用WebSockets代理</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        secure: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//指定是否验证SSL证书,如果是https接口，需要配置这个参数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        changeOrigin: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//是否改变源地址,用于指定是否更改请求的来源。默认为false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pathRewrite:{ </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重写路径,用于重写请求的路径</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &#39;^/api&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="_2、箭头函数" tabindex="-1">2、箭头函数 <a class="header-anchor" href="#_2、箭头函数" aria-label="Permalink to &quot;2、箭头函数&quot;">​</a></h2><p>箭头函数和普通函数在语法和行为上有一些重要的区别：</p><ol><li><p>语法：箭头函数的语法更简洁，它使用<code>=&gt;</code>符号来定义函数。例如，下面是一个箭头函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span></code></pre></div><p>相比之下，这是一个普通的函数：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>**this绑定：箭头函数不绑定自己的<code>this</code>值，它会捕获其所在上下文的<code>this</code>值。<strong>这意味着</strong><mark>箭头函数的<code>this</code>值在定义时就已经确定，不会在调用时改变。</mark>**例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  value: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 42</span></span></code></pre></div><p>在这个例子中，箭头函数<code>getValue</code>返回了一个箭头函数，这个箭头函数的<code>this</code>值是<code>getValue</code>函数的<code>this</code>值，也就是<code>obj</code>对象。所以，当箭头函数被调用时，它返回<code>obj</code>对象的<code>value</code>属性。</p><p>相比之下，如果<code>getValue</code>是一个普通的函数，那么箭头函数的<code>this</code>值会是<code>getValue</code>函数被调用的上下文的<code>this</code>值，可能不是<code>obj</code>对象。</p></li><li><p>**构造函数：箭头函数不能用作构造函数，**也就是说，你不能使用<code>new</code>关键字来创建箭头函数的实例。例如：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> animal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Animal is not a constructor</span></span></code></pre></div><p>在这个例子中，当你尝试使用<code>new</code>关键字来创建<code>Animal</code>函数的实例时，JavaScript会抛出一个错误，因为<code>Animal</code>是一个箭头函数，不能用作构造函数。</p></li></ol><p>总的来说，箭头函数在语法上更简洁，**并且有特殊的<code>this</code>绑定行为，这使得它们在某些情况下比普通函数更合适。然而，箭头函数也有一些限制，比如不能用作构造函数，**所以在使用箭头函数时需要考虑这些</p><h2 id="_3、form表单案例-新增" tabindex="-1">3、form表单案例-新增 <a class="header-anchor" href="#_3、form表单案例-新增" aria-label="Permalink to &quot;3、form表单案例-新增&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;addBrand-container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;container&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> :rules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rules&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label-width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;180px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- ref 是一个特殊的属性，用于给 DOM 元素或组件实例设置引用,this.$refs.ruleForm--&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;账号&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.username&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;员工姓名&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;手机号&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;phone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.phone&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;性别&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-radio</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.sex&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;男&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-radio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- label 属性指定了单选框的值。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-radio</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.sex&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;女&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-radio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;身份证号&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> prop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;idNumber&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ruleForm.idNumber&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form-item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        &lt;!-- 保存 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;subBox&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitForm(&#39;ruleForm&#39;, false)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;保存&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          &lt;!-- type=&quot;primary&quot;: 这是 Element UI 的按钮组件属性，表示按钮的样式类型为“主要”按钮，通常用来突出显示。 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> v-if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this.optType === &#39;add&#39;&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;submitForm(&#39;ruleForm&#39;, true)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;保存并继续添加员工</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> @click</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;() =&gt; this.$router.push(&#39;/employee&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;返回&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { validate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;schema-utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { addEmployee } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/api/employee&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      optType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;add&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//操作类型，add表示新增，edit表示编辑</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ruleForm: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phone: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sex: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        idNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      rules: { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表单校验规则</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入员工姓名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* trigger: &#39;blur&#39; 表示失去焦点触发 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { min: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;长度在 2 到 10 个字符&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        username: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入账号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { min: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;长度在 2 到 10 个字符&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phone: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { min: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;手机号码必须是11位！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* validator验证器 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">1(3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">6</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">9)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{9}$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//利用正则表达式判断手机号格式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入正确的手机号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        idNumber: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          { min: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;身份证号码位数不正确！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            required: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, trigger: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;blur&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">rule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* validator验证器 */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{17}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">x)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">$|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{15}$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{18}$</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//利用正则表达式判断身份证号格式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;请输入正确的身份证号&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  methods: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //提交表单数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    submitForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">formName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">isContinue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //表单数据校验</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs[formName].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">valid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (valid) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//校验通过</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          //添加员工</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          addEmployee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ruleForm).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.data.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;添加成功！&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isContinue) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果isContinue为true，则继续添加</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$refs[formName].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resetFields</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//重置表单</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果isContinue为false，则返回员工列表</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/employee&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//添加失败，返回错误信息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">              this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res.data.msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;scss&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.addBrand {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &amp;-container {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    margin: 30px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    margin-top: 30px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .HeadLable {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      background-color: transparent;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      margin-bottom: 0px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      padding-left: 0px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .container {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      position: relative;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      z-index: 1;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      background: #fff;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      padding: 30px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      border-radius: 4px;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // min-height: 500px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .subBox {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        padding-top: 30px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        text-align: center;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        border-top: solid 1px $gray-5;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .idNumber {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      margin-bottom: 39px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .el-form-item {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      margin-bottom: 29px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .el-input {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      width: 293px;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="_4、javascript的动态属性和vue的响应式系统" tabindex="-1">4、JavaScript的动态属性和Vue的响应式系统 <a class="header-anchor" href="#_4、javascript的动态属性和vue的响应式系统" aria-label="Permalink to &quot;4、JavaScript的动态属性和Vue的响应式系统&quot;">​</a></h2><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { validate } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;schema-utils&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { addEmployee, getEmployeeById ,updateEmployee} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@/api/employee&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      optType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;add&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//操作类型，add表示新增，edit表示修改</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //表单数据结构</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ruleForm: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        username: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        phone: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sex: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        idNumber: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//在组件创建时，根据路由参数判断操作类型 add 或者 update</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.optType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.query.id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;update&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;add&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> //路径参数id存在，则为update，否则为add</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.optType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;update&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果是update，则根据id获取员工信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      getEmployeeById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$route.query.id).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res.data.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//修改操作，需要根据id查询原始数据，用于回显</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ruleForm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data.data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span></code></pre></div><p>在 Vue.js 中，当你在 <code>created</code> 钩子中通过 API 调用来赋值 <code>this.ruleForm</code> 时，你可能会发现 <strong><code>this.ruleForm</code> 可以访问到从服务器返回的数据中的字段，即使这些字段在组件的<mark>初始数据定义中没有列出</mark></strong>。这种情况的原因可以归结为以下几点：</p><h3 id="_1-动态属性" tabindex="-1">1. <strong>动态属性</strong> <a class="header-anchor" href="#_1-动态属性" aria-label="Permalink to &quot;1. **动态属性**&quot;">​</a></h3><p><strong>JavaScript 对象是动态的，你可以随时向对象添加新的属性</strong>。这意味着，<strong>当你从服务器返回的数据中包含新的字段时，它们会被添加到 <code>this.ruleForm</code> 对象上，<mark>即使这些字段没有在初始数据定义中声明</mark></strong>。</p><p>例如，初始时 <code>ruleForm</code> 可能定义为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ruleForm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  idNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当你从 API 返回的数据中获取到 <code>id</code> 并赋值给 <code>this.ruleForm</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ruleForm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data.data</span></span></code></pre></div><p>如果 <code>res.data.data</code> 中包含 <code>id</code> 字段，<code>this.ruleForm</code> 将会包含这个 <code>id</code> 字段，因为对象的属性是可以动态添加的。</p><h3 id="_2-vue-的响应式系统" tabindex="-1">2.<strong><mark>Vue 的响应式系统</mark></strong> <a class="header-anchor" href="#_2-vue-的响应式系统" aria-label="Permalink to &quot;2.**==Vue 的响应式系统==**&quot;">​</a></h3><p><strong>Vue 的响应式系统会自动跟踪对象的变化</strong>。当你将新的对象赋值给 <code>this.ruleForm</code> 时，<strong>Vue 会将这个新对象添加到响应式系统中。原本定义在 <code>data</code> 中的 <code>ruleForm</code> 只是初始的结构定义，它不限制对象的实际使用情况</strong>。</p><h3 id="_3-数据结构和原型" tabindex="-1">3. <strong>数据结构和原型</strong> <a class="header-anchor" href="#_3-数据结构和原型" aria-label="Permalink to &quot;3. **数据结构和原型**&quot;">​</a></h3><p>即使你在 <code>data</code> 中定义了一个初始结构，实际运行时 <code>ruleForm</code> 可能会包含来自 API 的额外字段。由于 JavaScript 对象的动态特性，这些字段会被添加到 <code>ruleForm</code> 对象上，而不影响对象的原型或定义的结构。你可以随时访问和使用这些字段。</p><h3 id="_4-具体例子" tabindex="-1">4. <strong>具体例子</strong> <a class="header-anchor" href="#_4-具体例子" aria-label="Permalink to &quot;4. **具体例子**&quot;">​</a></h3><p>假设 API 返回的数据如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john_doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1234567890&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      idNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456789012345678&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc123&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 新字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当你执行：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ruleForm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res.data.data</span></span></code></pre></div><p><code>this.ruleForm</code> 将变成：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;john_doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  phone</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1234567890&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  sex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  idNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123456789012345678&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abc123&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 额外的字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因此，即使在初始定义中没有 <code>id</code> 字段，赋值后 <code>this.ruleForm.id</code> 依然是可访问的。</p><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li>JavaScript 对象是动态的，你可以随时添加和访问新的属性。</li><li>Vue 的响应式系统会处理所有对象的变化，包括动态添加的属性。</li><li><code>data</code> 中的初始结构仅用于定义初始状态，实际数据可以包含更多字段。</li></ul><p>通过理解这些原理，你可以更好地管理和使用你的数据对象，确保你的应用在处理动态数据时能正确响应和显示信息。</p><h1 id="三、苍穹外卖-前端环境搭建、员工管理" tabindex="-1">三、苍穹外卖-前端环境搭建、员工管理 <a class="header-anchor" href="#三、苍穹外卖-前端环境搭建、员工管理" aria-label="Permalink to &quot;三、苍穹外卖-前端环境搭建、员工管理&quot;">​</a></h1>`,34)),n(t),s[4]||(s[4]=i('<h2 id="课程内容-1" tabindex="-1">课程内容 <a class="header-anchor" href="#课程内容-1" aria-label="Permalink to &quot;课程内容&quot;">​</a></h2><ul><li><p>前端环境搭建</p></li><li><p>员工分页查询</p></li><li><p>启用禁用员工账号</p></li><li><p>新增员工</p></li><li><p>修改员工</p></li></ul><h2 id="_1-前端环境搭建" tabindex="-1">1. 前端环境搭建 <a class="header-anchor" href="#_1-前端环境搭建" aria-label="Permalink to &quot;1. 前端环境搭建&quot;">​</a></h2><h3 id="_1-1-技术选型" tabindex="-1">1.1 技术选型 <a class="header-anchor" href="#_1-1-技术选型" aria-label="Permalink to &quot;1.1 技术选型&quot;">​</a></h3><p>本项目使用到的前端技术如下：</p><ul><li>node.js</li><li>vue</li><li>ElementUI</li><li>axios</li><li>vuex</li><li>vue-router</li><li>typescript</li></ul><h3 id="_1-2-熟悉前端代码结构" tabindex="-1">1.2 熟悉前端代码结构 <a class="header-anchor" href="#_1-2-熟悉前端代码结构" aria-label="Permalink to &quot;1.2 熟悉前端代码结构&quot;">​</a></h3><p>直接导入课程资料中提供的苍穹外卖项目前端初始工程，此工程中已经开发了部分功能，后续我们在此基础上开发新功能即可。</p><p>导入后的效果如下：</p><p><img src="'+ls+'" alt="image-20231009112322302" loading="lazy"></p><p>主要代码在src目录中，src目录结构如下：</p><p><img src="'+ps+'" alt="image-20231009112436925" loading="lazy"></p><p>下面重点介绍一下src中的重点文件和目录：</p><ul><li>api：存放封装了Ajax请求文件的目录</li><li>components：公共组件存放目录</li><li>views：存放视图组件的目录</li><li>App.vue：项目的主组件，页面的入口文件</li><li>main.ts：整个项目的入口文件</li><li>router.ts：路由文件</li></ul><p>注意：我们上面导入的初始工程中并没有前端项目运行所依赖的JS包，需要在终端通过 npm install 命令进行安装。安装完成后，可以看到生成了node_modules目录，目录中就是安装的JS包，效果如下：</p><p><img src="'+hs+'" alt="image-20231009154944721" loading="lazy"></p><p>接下来，我们通过初始工程中已经完成的登录功能来跟踪程序的执行过程，熟悉前端项目的代码结构。</p><p>首先需要启动前端项目，命令为：npm run serve，然后访问前端项目，效果如下：</p><p><img src="'+es+'" alt="image-20231010103544159" loading="lazy"></p><p>注意：需要同时启动后端 java 服务，才能进行前后端交互。</p><p>具体操作的步骤如下：</p><p>① 获得登录页面路由地址</p><p>​ 登录页面完整的访问地址为 http: <a href="//localhost:8888/#/login%EF%BC%8C%E5%85%B6%E4%B8%AD%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E7%9A%84%E8%B7%AF%E7%94%B1%E5%9C%B0%E5%9D%80%E4%B8%BA" target="_blank" rel="noreferrer">//localhost:8888/#/login，其中登录页面的路由地址为</a> /login，我们需要通过此路由地址找到对应的登录视图组件</p><p>② 从main.ts中找到路由文件</p><p>​ main.ts是整个前端项目的入口文件，在此文件中会创建Vue实例，在创建Vue实例时需要传入路由对象，所以从此文件中可以找到对应的路由文件位置。如下所示：</p><p><img src="'+ks+'" alt="image-20231011101828271" loading="lazy"></p><p>③ 从路由文件中找到登录视图组件</p><p>​ 在路由文件中会配置整个项目所有的路由映射规则，我们只需要找到 /login 这个路径对应的实体组件即可。如下所示：</p><p><img src="'+ds+'" alt="image-20231011102024084" loading="lazy"></p><p>④ 从登录视图组件中找到登录方法</p><p>​ 从上面的路由文件可以确定登录视图组件就是src/views/login/index.vue，此时就可以打开这个文件，然后仔细阅读代码，找到登录方法，如下所示：</p><p><img src="'+rs+'" alt="image-20231011102341145" loading="lazy"></p><p>⑤ 跟踪登录方法的执行过程</p><p>​ 找到登录方法后，就需要跟踪代码的执行过程，主要就是观察前后端的交互过程。例如前端如何发送的Ajax请求，后端返回的数据格式等等</p><h2 id="_2-员工分页查询" tabindex="-1">2. 员工分页查询 <a class="header-anchor" href="#_2-员工分页查询" aria-label="Permalink to &quot;2. 员工分页查询&quot;">​</a></h2><h3 id="_2-1-需求分析和接口设计" tabindex="-1">2.1 需求分析和接口设计 <a class="header-anchor" href="#_2-1-需求分析和接口设计" aria-label="Permalink to &quot;2.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来了解需求，员工分页查询的产品原型如下：</p><p><img src="'+Es+'" alt="image-20231011104301458" loading="lazy"></p><p>业务规则：</p><ul><li>根据页码展示员工信息(员工姓名、账号、手机号、账号状态、最后操作时间等)</li><li>每页展示10条数据</li><li>分页查询时可以根据需要，输入员工姓名进行查询</li></ul><p>要展示员工分页数据，就需要前后端进行数据交互，对应的接口如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/employee/page</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>否</td><td>张三</td><td>员工姓名</td></tr><tr><td>page</td><td>是</td><td>1</td><td>页码</td></tr><tr><td>pageSize</td><td>是</td><td>10</td><td>每页记录数</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>null</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ total</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ records</td><td>object []</td><td>必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ id</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ username</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ password</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ phone</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ sex</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ idNumber</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createTime</td><td>string,null</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateTime</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createUser</td><td>number,null</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateUser</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_2-2-代码开发" tabindex="-1">2.2 代码开发 <a class="header-anchor" href="#_2-2-代码开发" aria-label="Permalink to &quot;2.2 代码开发&quot;">​</a></h3><p>要开发前端代码，首先需要找到对应的组件。从路由文件 router.ts 中找到员工管理页面（组件）。</p><p><img src="'+gs+'" alt="image-20231012100658784" loading="lazy"></p><p>可以看到，员工管理页面（组件）的位置为：src/views/employee/index.vue。我们只需要在此文件中开发员工分页查询相关的前端代码即可，整个开发过程大概可以分为以下几个关键步骤：</p><ol><li>根据产品原型，制作页面头部效果（输入框、查询按钮等）</li><li>为查询按钮绑定单击事件，发送Ajax请求，查询员工分页数据，实现前后端交互</li><li>提供 vue 的初始化方法，在页面加载后就查询分页数据</li><li>使用ElementUI提供的表格组件展示分页数据</li><li>使用ElementUI提供的分页条组件实现翻页效果</li></ol><p>注意：开发过程中，并不是所有的代码都实现了再测试，而是开发一部分，就需要测试一下，看效果，如果有问题再调整。没有问题，再继续开发、测试。所以，这是一个逐渐完善的过程。下面我们就按照上面的几个关键步骤来开发，每开发完一个关键步骤，就需要测试一下，来验证我们的代码是否正确。</p><h4 id="_2-2-1-制作页面头部效果" tabindex="-1">2.2.1 制作页面头部效果 <a class="header-anchor" href="#_2-2-1-制作页面头部效果" aria-label="Permalink to &quot;2.2.1 制作页面头部效果&quot;">​</a></h4><p>根据产品原型，制作页面头部效果（输入框、查询按钮等）。产品原型中的头部效果如下：</p><p><img src="'+os+'" alt="image-20231012104130496" loading="lazy"></p><p>注意：输入框和按钮都是使用 ElementUI 提供的组件，对于前端的组件只需要参考 ElementUI 提供的文档，进行修改即可。实现代码如下：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">`&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tableBar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    `&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;margin-right: 5px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        员工姓名: </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    `&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    `&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeholder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;请输入员工姓名&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;width: 15%&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    `&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;margin-left: 20px&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`查询`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    `&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;primary&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> style</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;float: right&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`+添加员工`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">el-button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">`&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;`</span></span></code></pre></div><p>开发完上面代码后，就可以测试一下，页面效果如下：</p><p><img src="'+ys+'" alt="image-20231012114155894" loading="lazy"></p><h4 id="_2-2-2-实现前后端数据交互" tabindex="-1">2.2.2 实现前后端数据交互 <a class="header-anchor" href="#_2-2-2-实现前后端数据交互" aria-label="Permalink to &quot;2.2.2 实现前后端数据交互&quot;">​</a></h4><p>前面我们已经完成了页面头部效果开发，接下来就需要开发前后端数据交互的动态效果。</p><p>第一步：为查询按钮绑定单击事件</p><p><img src="'+cs+'" alt="image-20231016094210211" loading="lazy"></p><p>第二步：在methods中定义 pageQuery 方法，先验证当前方法能否正常执行</p><p><img src="'+Fs+'" alt="image-20231016094354605" loading="lazy"></p><p>注意：按照开发规范，真正发送Ajax请求的代码需要封装到 api目录下的ts文件中（src/api/employee.ts）</p><p>第三步：在src/api/employee.ts 中定义 getEmployeeList 方法，实现发送Ajax请求获取分页数据</p><p><img src="'+ms+'" alt="image-20231016094612536" loading="lazy"></p><p>注意：发送 Ajax 请求的URL地址需要和前面我们设计的分页查询接口对应</p><p>第四步：在员工管理组件中导入 employee.ts 中定义的方法，并在data() 方法中定义分页相关的模型数据</p><p><img src="'+us+'" alt="image-20231016094930398" loading="lazy"></p><p>注意：需要将name属性和上面的员工姓名输入框进行双向绑定，如下：</p><p><img src="'+Cs+'" alt="image-20231016095018274" loading="lazy"></p><p>第五步：在pageQuery 方法中调用 getEmployeeList 方法</p><p><img src="'+bs+'" alt="image-20231016095152184" loading="lazy"></p><h4 id="_2-2-3-自动发送ajax请求" tabindex="-1">2.2.3 自动发送Ajax请求 <a class="header-anchor" href="#_2-2-3-自动发送ajax请求" aria-label="Permalink to &quot;2.2.3 自动发送Ajax请求&quot;">​</a></h4><p>前面的代码我们已经实现了前后端数据交互，但是有一个问题，就是只有在点击查询按钮时才会发生Ajax请求，实现分页数据查询。我们通常需要的是在当前页面（组件）加载后，就需要发送Ajax请求，查询第一页的数据。要实现这个效果，我们可以通过vue的生命周期方法，即created方法来做到，代码如下：</p><p><img src="'+Bs+'" alt="image-20231016095540340" loading="lazy"></p><h4 id="_2-2-4-使用表格展示分页数据" tabindex="-1">2.2.4 使用表格展示分页数据 <a class="header-anchor" href="#_2-2-4-使用表格展示分页数据" aria-label="Permalink to &quot;2.2.4 使用表格展示分页数据&quot;">​</a></h4><p>前面我们已经实现了前后端数据交互，现在就需要将后端返回的数据通过表格展示出来，我们可以使用ElementUI提供的表格组件，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/table" target="_blank" rel="noreferrer">https://element.eleme.io/#/zh-CN/component/table</a></p><p><img src="'+As+'" alt="image-20231016100031134" loading="lazy"></p><h4 id="_2-2-5-使用分页条实现翻页效果" tabindex="-1">2.2.5 使用分页条实现翻页效果 <a class="header-anchor" href="#_2-2-5-使用分页条实现翻页效果" aria-label="Permalink to &quot;2.2.5 使用分页条实现翻页效果&quot;">​</a></h4><p>使用 ElementUI 提供的分页条组件，并绑定事件处理函数，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/pagination" target="_blank" rel="noreferrer">https://element.eleme.io/#/zh-CN/component/pagination</a></p><p><img src="'+Ds+'" alt="image-20231016100300675" loading="lazy"></p><p><img src="'+_s+'" alt="image-20231016100327628" loading="lazy"></p><h3 id="_2-3-功能测试" tabindex="-1">2.3 功能测试 <a class="header-anchor" href="#_2-3-功能测试" aria-label="Permalink to &quot;2.3 功能测试&quot;">​</a></h3><p>可以通过下面两种方式来测试：</p><ul><li>直接进行前后端联调，查看页面效果</li><li>通过浏览器F12查看数据交互过程</li></ul><h2 id="_3-启用禁用员工账号" tabindex="-1">3. 启用禁用员工账号 <a class="header-anchor" href="#_3-启用禁用员工账号" aria-label="Permalink to &quot;3. 启用禁用员工账号&quot;">​</a></h2><h3 id="_3-1-需求分析和接口设计" tabindex="-1">3.1 需求分析和接口设计 <a class="header-anchor" href="#_3-1-需求分析和接口设计" aria-label="Permalink to &quot;3.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析：</p><p><img src="'+vs+'" alt="image-20231016103554407" loading="lazy"></p><p>可以对状态为“启用” 的员工账号进行“禁用”操作</p><p>可以对状态为“禁用”的员工账号进行“启用”操作</p><p>状态为“禁用”的员工账号不能登录系统</p><p>接口设计如下：</p><p><strong>基本信息</strong></p>',100)),s[5]||(s[5]=a("p",{status:""},[a("strong",null,"Path："),l(" /admin/employee/status/")],-1)),s[6]||(s[6]=i('<p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application/json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>路径参数</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>1</td><td>状态，1为启用 0为禁用</td></tr></tbody></table><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>是</td><td></td><td>员工id</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_3-2-代码开发" tabindex="-1">3.2 代码开发 <a class="header-anchor" href="#_3-2-代码开发" aria-label="Permalink to &quot;3.2 代码开发&quot;">​</a></h3><p>第一步：为启用、禁用按钮绑定单击事件</p><p><img src="'+xs+'" alt="image-20231016154949134" loading="lazy"></p><p>第二步：编写对应的处理函数handleStartOrStop</p><p><img src="'+qs+'" alt="image-20231016155041179" loading="lazy"></p><p>到此可以先测试一下，检查当前方法能否成功执行，页面效果如下：</p><p><img src="'+fs+'" alt="image-20231016155124396" loading="lazy"></p><p>第三步：在 employee.ts 中封装启用禁用员工账号方法，发送Ajax请求</p><p><img src="'+Ps+'" alt="image-20231016155246041" loading="lazy"></p><p>注意：发送请求的方式和相关参数，必须和前面的接口设计保持一致</p><p>第四步：在员工管理组件中引入上面定义的enableOrDisableEmployee方法，并完善 handleStartOrStop 方法</p><p><img src="'+zs+'" alt="image-20231016155426898" loading="lazy"></p><p>第五步：代码优化，如果是管理员账号则不允许更改账号状态</p><p><img src="'+js+'" alt="image-20231016155558430" loading="lazy"></p><h3 id="_3-3-功能测试" tabindex="-1">3.3 功能测试 <a class="header-anchor" href="#_3-3-功能测试" aria-label="Permalink to &quot;3.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="'+Ts+'" alt="image-20231016152210849" loading="lazy"></p><h2 id="_4-新增员工" tabindex="-1">4. 新增员工 <a class="header-anchor" href="#_4-新增员工" aria-label="Permalink to &quot;4. 新增员工&quot;">​</a></h2><h3 id="_4-1-需求分析和接口设计" tabindex="-1">4.1 需求分析和接口设计 <a class="header-anchor" href="#_4-1-需求分析和接口设计" aria-label="Permalink to &quot;4.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="'+p+'" alt="image-20231017105355195" loading="lazy"></p><p>新增员工时需要录入 账号、员工姓名、手机号、性别、身份证号等信息。其中账号因为是登录凭证，所以必须是唯一的。手机号要求必须是合法的11位手机号码，身份证号为合法的18位身份证号码。</p><p>当新员工入职后，可以通过当前的新增员工功能来为新员工开通账号，新员工通过开通的账号来登录商家管理端系统。</p><p>接口设计如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/employee</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application/json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>id</td><td>integer</td><td>非必须</td><td></td><td>员工id</td><td>format: int64</td></tr><tr><td>idNumber</td><td>string</td><td>必须</td><td></td><td>身份证</td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td>姓名</td><td></td></tr><tr><td>phone</td><td>string</td><td>必须</td><td></td><td>手机号</td><td></td></tr><tr><td>sex</td><td>string</td><td>必须</td><td></td><td>性别</td><td></td></tr><tr><td>username</td><td>string</td><td>必须</td><td></td><td>用户名</td><td></td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_4-2-代码开发" tabindex="-1">4.2 代码开发 <a class="header-anchor" href="#_4-2-代码开发" aria-label="Permalink to &quot;4.2 代码开发&quot;">​</a></h3><p>要开发新增员工前端代码，首先需要了解添加员工业务功能的操作步骤：</p><ol><li>在员工管理列表页面，点击 “添加员工”按钮，跳转到新增页面</li><li>在新增员工页面录入员工相关信息</li><li>点击“保存”按钮完成新增操作</li></ol><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：为“添加员工”按钮绑定单击事件</p><p><img src="'+Vs+'" alt="image-20231017162453327" loading="lazy"></p><p>第二步：编写 handleAddEmp 方法，进行路由跳转</p><p><img src="'+Ss+'" alt="image-20231017162515941" loading="lazy"></p><p>注意：在路由文件中已经配置了如下路由规则</p><p><img src="'+ws+'" alt="image-20231017162553386" loading="lazy"></p><p>第三步：根据产品原型，开发页面元素</p><p><img src="'+Ns+'" alt="image-20231017162651760" loading="lazy"></p><p>第四步：定义模型数据和表单校验规则</p><p><img src="'+Is+'" alt="image-20231017162927506" loading="lazy"></p><p><img src="'+Us+'" alt="image-20231017162808963" loading="lazy"></p><p>第五步：在 employee.ts 中封装新增员工方法，发送Ajax请求，实现前后端交互</p><p><img src="'+Ms+'" alt="image-20231017163005227" loading="lazy"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第六步：在 methods 中定义提交表单的方法 submitForm</p><p><img src="'+Rs+'" alt="image-20231017163116948" loading="lazy"></p><h3 id="_4-3-功能测试" tabindex="-1">4.3 功能测试 <a class="header-anchor" href="#_4-3-功能测试" aria-label="Permalink to &quot;4.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><h2 id="_5-修改员工" tabindex="-1">5. 修改员工 <a class="header-anchor" href="#_5-修改员工" aria-label="Permalink to &quot;5. 修改员工&quot;">​</a></h2><h3 id="_5-1-需求分析和接口设计" tabindex="-1">5.1 需求分析和接口设计 <a class="header-anchor" href="#_5-1-需求分析和接口设计" aria-label="Permalink to &quot;5.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="'+p+'" alt="image-20231017105355195" loading="lazy"></p><p>修改员工时需要回显 账号、员工姓名、手机号、性别、身份证号等信息。其中账号因为是登录凭证，所以必须是唯一的。手机号要求必须是合法的11位手机号码，身份证号为合法的18位身份证号码。根据需要对数据进行修改即可。</p><p>修改员工功能涉及到2个接口，分别是根据id查询员工信息和根据id修改员工信息。具体接口设计如下：</p><p>（1）根据id查询员工 接口</p><p><strong>基本信息</strong></p><p id=""><strong>Path：</strong> /admin/employee/</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>路径参数</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>100</td><td>员工id</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ idNumber</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ password</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ phone</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sex</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ username</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>（2）根据id修改员工信息 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/employee</p><p><strong>Method：</strong> PUT</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application/json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>id</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>idNumber</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>phone</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>sex</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>username</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_5-2-代码开发" tabindex="-1">5.2 代码开发 <a class="header-anchor" href="#_5-2-代码开发" aria-label="Permalink to &quot;5.2 代码开发&quot;">​</a></h3><p>要开发修改员工前端代码，首先需要了解修改员工业务功能的操作步骤：</p><ol><li>在员工管理列表页面点击 “修改”按钮，跳转到修改页面</li><li>在修改员工页面录入员工相关信息</li><li>点击“保存”按钮完成修改操作</li></ol><p>注意：</p><ul><li>由于添加员工和修改员工的表单项非常类似，所以添加和修改操作可以共用同一个页面（addEmployee.vue）</li><li>修改员工涉及到原始数据回显，所以页面跳转时需要传递员工id作为参数</li></ul><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：在员工管理页面中，为“修改”按钮绑定单击事件，用于跳转到修改页面</p><p><img src="'+Js+'" alt="image-20231018153123546" loading="lazy"></p><p>第二步：在methods中编写 handleUpdateEmp 方法，实现路由跳转</p><p><img src="'+Ls+'" alt="image-20231018153201351" loading="lazy"></p><p>注意：使用路由对象的push方法在进行路由跳转时，可以通过地址栏传递参数，具体语法为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({path: 路由路径, query:{参数名:参数值}})</span></span></code></pre></div><p>第三步：在 addEmployee.vue 组件中定义模型数据optType，用于区分本次操作是新增还是修改</p><p><img src="'+Hs+'" alt="image-20231018153639687" loading="lazy"></p><p>注意：区分当前操作是新增员工还是修改员工，只需要尝试获取路由参数id。如果能获取到则当前操作为修改，否则为新增。具体获取路由参数的语法为：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$router.query.参数名</span></span></code></pre></div><p>第四步：如果是修改操作，需要根据id查询员工原始信息用于页面回显，需要在 employee.ts 中创建queryEmployeeById方法</p><p><img src="'+Os+'" alt="image-20231018154041788" loading="lazy"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第五步：在 addEmployee.vue 组件的 created 方法中查询员工原始信息用于页面数据回显</p><p><img src="'+Qs+'" alt="image-20231018154225861" loading="lazy"></p><p>到目前位置已经实现了员工信息的回显，可以进行简单的测试，如果回显没有问题再继续开发后面的代码</p><p>第六步：如果是修改操作，“保存并继续添加员工” 按钮则不需要显示，通过 v-if 指令进行判断</p><p><img src="'+$s+'" alt="image-20231018154415419" loading="lazy"></p><p>第七步：在 employee.ts 中创建方法，用于修改员工，发送Ajax请求</p><p><img src="'+Ws+'" alt="image-20231018154443989" loading="lazy"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第八步：修改 addEmployee.vue 组件中的 submitForm 方法，需要根据当前操作类型执行新增或者修改操作</p><p><img src="'+Ys+'" alt="image-20231018154601719" loading="lazy"></p><h3 id="_5-3-功能测试" tabindex="-1">5.3 功能测试 <a class="header-anchor" href="#_5-3-功能测试" aria-label="Permalink to &quot;5.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><h1 id="四、苍穹外卖-套餐管理" tabindex="-1">四、苍穹外卖-套餐管理 <a class="header-anchor" href="#四、苍穹外卖-套餐管理" aria-label="Permalink to &quot;四、苍穹外卖-套餐管理&quot;">​</a></h1>',130)),n(t),s[7]||(s[7]=i('<h2 id="课程内容-2" tabindex="-1">课程内容 <a class="header-anchor" href="#课程内容-2" aria-label="Permalink to &quot;课程内容&quot;">​</a></h2><ul><li>套餐分页查询</li><li>启售停售套餐</li><li>删除套餐</li><li>新增套餐</li></ul><h2 id="_1-套餐分页查询" tabindex="-1">1. 套餐分页查询 <a class="header-anchor" href="#_1-套餐分页查询" aria-label="Permalink to &quot;1. 套餐分页查询&quot;">​</a></h2><h3 id="_1-1-需求分析和接口设计" tabindex="-1">1.1 需求分析和接口设计 <a class="header-anchor" href="#_1-1-需求分析和接口设计" aria-label="Permalink to &quot;1.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来了解需求，套餐分页查询的产品原型如下：</p><p><img src="'+Gs+'" alt="image-20231019100236805" loading="lazy"></p><p>业务规则：</p><ul><li>根据页码展示套餐信息(套餐名称、套餐图片、套餐分类、价格、售卖状态、最后操作时间等)</li><li>每页展示10条数据</li><li>分页查询时可以根据需要，输入套餐名、套餐分类、售卖状态 进行查询</li></ul><p>要展示套餐分页数据，就需要前后端进行数据交互，对应的接口有两个：</p><ul><li>分类查询接口（用于套餐分类下拉框中分类数据展示）</li><li>套餐分页查询接口</li></ul><p>（1）分类查询接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/category/list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>否</td><td>2</td><td>分类类型：1为菜品分类，2为套餐分类</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sort</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ type</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>（2）套餐分页查询接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/setmeal/page</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>categoryId</td><td>否</td><td></td><td>分类id</td></tr><tr><td>name</td><td>否</td><td></td><td>套餐名称</td></tr><tr><td>page</td><td>是</td><td></td><td>页码</td></tr><tr><td>pageSize</td><td>是</td><td></td><td>每页记录数</td></tr><tr><td>status</td><td>否</td><td></td><td>套餐起售状态</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>null</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ total</td><td>number</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ records</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ id</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ categoryId</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ price</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>number</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ description</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ image</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ updateTime</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr><tr><td>├─ categoryName</td><td>string</td><td>必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_1-2-代码开发" tabindex="-1">1.2 代码开发 <a class="header-anchor" href="#_1-2-代码开发" aria-label="Permalink to &quot;1.2 代码开发&quot;">​</a></h3><p>要开发前端代码，首先需要找到对应的组件。从路由文件 router.ts 中找到套餐管理页面（组件）。</p><p><img src="'+Ks+'" alt="image-20231020143129575" loading="lazy"></p><p>可以看到，套餐管理页面（组件）的位置为：src/views/setmeal/index.vue。我们只需要在此文件中开发套餐分页查询相关的前端代码即可，整个开发过程大概可以分为以下几个关键步骤：</p><ol><li>根据产品原型，制作页面头部效果（输入框、下拉框、查询按钮等）</li><li>动态填充套餐分类下拉框中的分类数据</li><li>为查询按钮绑定单击事件，发送Ajax请求，查询套餐分页数据，实现前后端交互</li><li>提供 vue 的初始化方法，在页面加载后就查询分页数据</li><li>使用ElementUI提供的表格组件展示分页数据</li><li>使用ElementUI提供的分页条组件实现翻页效果</li></ol><p>注意：开发过程中，并不是所有的代码都实现了再测试，而是开发一部分，就需要测试一下，看效果，如果有问题再调整。没有问题，再继续开发、测试。所以，这是一个逐渐完善的过程。下面我们就按照上面的几个关键步骤来开发，每开发完一个关键步骤，就需要测试一下，来验证我们的代码是否正确。</p><h4 id="_2-2-1-制作页面头部效果-1" tabindex="-1">2.2.1 制作页面头部效果 <a class="header-anchor" href="#_2-2-1-制作页面头部效果-1" aria-label="Permalink to &quot;2.2.1 制作页面头部效果&quot;">​</a></h4><p>根据产品原型，制作页面头部效果（输入框、查询按钮等）。产品原型中的头部效果如下：</p><p><img src="'+Xs+'" alt="image-20231020153003427" loading="lazy"></p><p>注意：输入框和按钮都是使用 ElementUI 提供的组件，对于前端的组件只需要参考 ElementUI 提供的文档，进行修改即可。实现代码如下：</p><p><img src="'+Zs+'" alt="image-20231020153413719" loading="lazy"></p><p>注意：当前套餐分类下拉框中的数据是直接在页面固定写死的，后续需要改为从后端动态获取。</p><h4 id="_2-2-2-动态填充套餐分类下拉框数据" tabindex="-1">2.2.2 动态填充套餐分类下拉框数据 <a class="header-anchor" href="#_2-2-2-动态填充套餐分类下拉框数据" aria-label="Permalink to &quot;2.2.2 动态填充套餐分类下拉框数据&quot;">​</a></h4><p>现在需要将套餐分类下拉框中的数据改为动态获取，即前端需要发送Ajax请求，调用后端的分类查询接口，然后将后端返回的套餐分类数据动态展示在下拉框中。因为本次前后端交互是需要查询分类数据，所以按照项目规范，发送Ajax请求的代码需要定义到 src/api/category.ts 文件中。其实在此文件中已经定义了此方法，如下：</p><p><img src="'+si+'" alt="image-20231020153956869" loading="lazy"></p><p>所以，此处只需要将此方法(getCategoryByType)导入当前组件，然后在 created 方法中调用此方法，获取套餐分类数据，动态填充套餐分类下拉框即可。具体代码如下：</p><p><img src="'+ii+'" alt="image-20231020154449782" loading="lazy"></p><p>注意：因为此处我们要查询的是套餐分类，所以传递的参数type值为2。</p><p>前面我们已经初步实现了页面头部制作，并且可以填充下拉框中的数据了。但是命名上并不是特别规范，所以我们需要进行一个调整，具体修改后端的代码如下：</p><p><img src="'+ai+'" alt="image-20231020154747092" loading="lazy"></p><p>两个下拉框的测试效果如下：</p><p><img src="'+ti+'" alt="image-20231020154909513" loading="lazy"></p><h4 id="_2-2-3-动态获取套餐分页数据" tabindex="-1">2.2.3 动态获取套餐分页数据 <a class="header-anchor" href="#_2-2-3-动态获取套餐分页数据" aria-label="Permalink to &quot;2.2.3 动态获取套餐分页数据&quot;">​</a></h4><p>前面我们已经完成了页面头部效果开发，接下来就需要开发前后端数据交互的动态效果。</p><p>第一步：为查询按钮绑定单击事件</p><p><img src="'+ni+'" alt="image-20231020155054149" loading="lazy"></p><p>第二步：在methods中定义 pageQuery 方法，先验证当前方法能否正常执行</p><p><img src="'+li+'" alt="image-20231020155113565" loading="lazy"></p><p>注意：按照开发规范，真正发送Ajax请求的代码需要封装到 api目录下的ts文件中（src/api/setMeal.ts）</p><p>第三步：在src/api/setMeal.ts 中定义 getSetmealPage 方法，实现发送Ajax请求获取分页数据</p><p><img src="'+pi+'" alt="image-20231020155235487" loading="lazy"></p><p>注意：发送 Ajax 请求的URL地址需要和前面我们设计的分页查询接口对应</p><p>第四步：在套餐管理组件中导入 setMeal.ts 中定义的方法，并在data() 方法中定义分页相关的模型数据</p><p><img src="'+hi+'" alt="image-20231020155347403" loading="lazy"></p><p>注意：需要将属性和上面的输入框、下拉框进行双向绑定。</p><p>第五步：在pageQuery 方法中调用 getSetmealPage方法，实现前后端数据交互</p><p><img src="'+ei+'" alt="image-20231020155526957" loading="lazy"></p><h4 id="_2-2-4-自动发送ajax请求" tabindex="-1">2.2.4 自动发送Ajax请求 <a class="header-anchor" href="#_2-2-4-自动发送ajax请求" aria-label="Permalink to &quot;2.2.4 自动发送Ajax请求&quot;">​</a></h4><p>前面的代码我们已经实现了前后端数据交互，但是有一个问题，就是只有在点击查询按钮时才会发生Ajax请求，实现分页数据查询。我们通常需要的是在当前页面（组件）加载后，就需要发送Ajax请求，查询第一页的数据。要实现这个效果，我们可以通过vue的生命周期方法，即created方法来做到，代码如下：</p><p><img src="'+ki+'" alt="image-20231020155637956" loading="lazy"></p><h4 id="_2-2-5-使用表格展示分页数据" tabindex="-1">2.2.5 使用表格展示分页数据 <a class="header-anchor" href="#_2-2-5-使用表格展示分页数据" aria-label="Permalink to &quot;2.2.5 使用表格展示分页数据&quot;">​</a></h4><p>前面我们已经实现了前后端数据交互，现在就需要将后端返回的数据通过表格展示出来，我们可以使用ElementUI提供的表格组件，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/table" target="_blank" rel="noreferrer">https://element.eleme.io/#/zh-CN/component/table</a></p><p><img src="'+di+'" alt="image-20231020155734122" loading="lazy"></p><h4 id="_2-2-6-使用分页条实现翻页效果" tabindex="-1">2.2.6 使用分页条实现翻页效果 <a class="header-anchor" href="#_2-2-6-使用分页条实现翻页效果" aria-label="Permalink to &quot;2.2.6 使用分页条实现翻页效果&quot;">​</a></h4><p>使用 ElementUI 提供的分页条组件，并绑定事件处理函数，具体使用方法可以参照官方提供的示例 <a href="https://element.eleme.io/#/zh-CN/component/pagination" target="_blank" rel="noreferrer">https://element.eleme.io/#/zh-CN/component/pagination</a></p><p><img src="'+ri+'" alt="image-20231020155812305" loading="lazy"></p><h3 id="_1-3-功能测试" tabindex="-1">1.3 功能测试 <a class="header-anchor" href="#_1-3-功能测试" aria-label="Permalink to &quot;1.3 功能测试&quot;">​</a></h3><p>可以通过下面两种方式来测试：</p><ul><li>直接进行前后端联调，查看页面效果</li><li>通过浏览器F12查看数据交互过程</li></ul><p><img src="'+Ei+'" alt="image-20231020155938508" loading="lazy"></p><h2 id="_2-启售停售套餐" tabindex="-1">2. 启售停售套餐 <a class="header-anchor" href="#_2-启售停售套餐" aria-label="Permalink to &quot;2. 启售停售套餐&quot;">​</a></h2><h3 id="_2-1-需求分析和接口设计-1" tabindex="-1">2.1 需求分析和接口设计 <a class="header-anchor" href="#_2-1-需求分析和接口设计-1" aria-label="Permalink to &quot;2.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析：</p><p><img src="'+gi+'" alt="image-20231023094228836" loading="lazy"></p><p>可以对状态为“启售” 的套餐进行“停售”操作</p><p>可以对状态为“停售”的套餐进行“启售”操作</p><p>状态为“停售”的套餐不展示在用户端小程序中，所以用户不能购买停售的套餐</p><p>接口设计如下：</p><p><strong>基本信息</strong></p>',87)),s[8]||(s[8]=a("p",{status:""},[a("strong",null,"Path："),l(" /admin/setmeal/status/")],-1)),s[9]||(s[9]=i('<p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application/json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>路径参数</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>1</td><td>套餐状态，1表示起售，0表示停售</td></tr></tbody></table><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>是</td><td>101</td><td>套餐id</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_2-2-代码开发-1" tabindex="-1">2.2 代码开发 <a class="header-anchor" href="#_2-2-代码开发-1" aria-label="Permalink to &quot;2.2 代码开发&quot;">​</a></h3><p>第一步：为启售停售按钮绑定单击事件</p><p><img src="'+oi+'" alt="image-20231023095123819" loading="lazy"></p><p>第二步：编写对应的处理函数handleStartOrStop</p><p><img src="'+yi+'" alt="image-20231023095249208" loading="lazy"></p><p>到此可以先测试一下，检查当前方法能否成功执行，页面效果如下：</p><p><img src="'+ci+'" alt="image-20231023095322300" loading="lazy"></p><p>第三步：在 setMeal.ts 中封装套餐起售停售方法，发送Ajax请求</p><p><img src="'+Fi+'" alt="image-20231023095630819" loading="lazy"></p><p>注意：发送请求的方式和相关参数，必须和前面的接口设计保持一致</p><p>第四步：在套餐管理组件中引入上面定义的enableOrDisableSetmeal方法，并完善 handleStartOrStop 方法</p><p><img src="'+mi+'" alt="image-20231023095730185" loading="lazy"></p><p>注意：</p><ul><li>在进行套餐启售停售操作时，建议先弹出确认框，用户点击确定按钮后再进行前后端交互</li><li>在传递套餐状态参数status时，需要进行简单的处理，即：如果当前套餐状态值为1，则传递过去的参数为0；如果当前套餐状态值为0，则传递过去的参数为1</li></ul><h3 id="_2-3-功能测试-1" tabindex="-1">2.3 功能测试 <a class="header-anchor" href="#_2-3-功能测试-1" aria-label="Permalink to &quot;2.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="'+ui+'" alt="image-20231023100008708" loading="lazy"></p><h2 id="_3-删除套餐" tabindex="-1">3. 删除套餐 <a class="header-anchor" href="#_3-删除套餐" aria-label="Permalink to &quot;3. 删除套餐&quot;">​</a></h2><h3 id="_3-1-需求分析和接口设计-1" tabindex="-1">3.1 需求分析和接口设计 <a class="header-anchor" href="#_3-1-需求分析和接口设计-1" aria-label="Permalink to &quot;3.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="'+Ci+'" alt="image-20231023142125944" loading="lazy"></p><ul><li>点击 删除 按钮，删除指定的一个套餐</li><li>勾选需要删除的套餐，点击 批量删除 按钮，删除选中的一个或多个套餐</li><li>状态为 “启售” 的套餐不能删除，需要给出操作提示</li></ul><p>可以看到，删除套餐功能在操作时有两种方式。一种是点击【删除】按钮，可以删除对应的一个套餐；一种是勾选需要删除的套餐，然后点击【批量删除】按钮，可以删除勾选的多个套餐。我们在设计接口时可以兼容这两种不同的操作方式，也就是只需要一个接口即可。</p><p>接口设计如下：</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/setmeal</p><p><strong>Method：</strong> DELETE</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>ids</td><td>是</td><td>1,2,3</td><td>ids</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_3-2-代码开发-1" tabindex="-1">3.2 代码开发 <a class="header-anchor" href="#_3-2-代码开发-1" aria-label="Permalink to &quot;3.2 代码开发&quot;">​</a></h3><p>要开发删除套餐前端代码，首先需要了解删除套餐业务功能的操作步骤：</p><ol><li>在套餐管理列表页面，点击 【删除】按钮，或者勾选套餐然后点击【批量删除】按钮，弹出确认对话框</li><li>点击确认对话框中的【确定】按钮，则执行删除操作。如果套餐状态为“启售”，则不能删除，弹出信息提示</li><li>点击确认对话框中的【取消】按钮，则关闭对话框，不执行删除操作</li></ol><p>接下来我们就可以按照上面的操作步骤来具体开发前端的代码。</p><p>第一步：在 setMeal.ts 中封装删除套餐方法，发送Ajax请求，用于实现前后端交互</p><p><img src="'+bi+'" alt="image-20231023163921668" loading="lazy"></p><p>注意：</p><ul><li>发送请求的方式和相关参数，必须和前面的接口设计保持一致</li><li>使用此方法时，别忘了在组件中通过import导入</li></ul><p>第二步：为【批量删除】按钮绑定单击事件，并在methods中编写对应的处理函数</p><p><img src="'+Bi+'" alt="image-20231023164110268" loading="lazy"></p><p><img src="'+Ai+'" alt="image-20231023164255891" loading="lazy"></p><p>到目前为止我们点击【批量删除】按钮，是可以执行handleDelete方法的。接下来我们需要解决一个问题，就是当前选中了哪些套餐呢？我们需要能够动态获取到，因为我们需要将这些套餐的id作为参数传递到后端。</p><p>第三步：参考 ElementUI 的官方文档，为表格组件添加 <strong>selection-change</strong> 事件和对应的处理函数，通过此事件我们就可以动态获取到当前勾选的套餐有哪些</p><p><img src="'+Di+'" alt="image-20231023165937804" loading="lazy"></p><p><img src="'+_i+'" alt="image-20231023170202159" loading="lazy"></p><p>注： <strong>selection-change</strong> 事件为 当选择项发生变化时触发的事件</p><p>第四步：完善 handleDelete 方法，获取当前被选中的行，并进行参数准备</p><p><img src="'+vi+'" alt="image-20231023170312864" loading="lazy"></p><p>注意：单个删除 和 批量删除，都是调用 handleDelete 方法，所以此方法还需要进一步调整</p><p>第五步：为【删除】按钮绑定单击事件，处理函数还是 handleDelete</p><p><img src="'+xi+'" alt="image-20231023170440585" loading="lazy"></p><p>注意：</p><ul><li>在 handleDelete 方法中通过第一个参数来区分是单个删除还是批量删除</li><li>S表示单个删除，B表示批量删除</li></ul><p>第六步：调整 handleDelete 方法，使其兼容单个删除和批量删除</p><p><img src="'+qi+'" alt="image-20231023170612705" loading="lazy"></p><p>第七步：完善 handleDelete 方法，进行相应提示</p><p><img src="'+fi+'" alt="image-20231023170710212" loading="lazy"></p><p>注：</p><ul><li>批量删除时，如果没有选中套餐，给出提示</li><li>删除之前需要弹出确认框，让用户确认</li></ul><h3 id="_3-3-功能测试-1" tabindex="-1">3.3 功能测试 <a class="header-anchor" href="#_3-3-功能测试-1" aria-label="Permalink to &quot;3.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><p><img src="'+Pi+'" alt="image-20231023170832442" loading="lazy"></p><h2 id="_4-新增套餐" tabindex="-1">4. 新增套餐 <a class="header-anchor" href="#_4-新增套餐" aria-label="Permalink to &quot;4. 新增套餐&quot;">​</a></h2><h3 id="_4-1-需求分析和接口设计-1" tabindex="-1">4.1 需求分析和接口设计 <a class="header-anchor" href="#_4-1-需求分析和接口设计-1" aria-label="Permalink to &quot;4.1 需求分析和接口设计&quot;">​</a></h3><p>根据产品原型来进行需求分析，产品原型如下：</p><p><img src="'+zi+'" alt="image-20231025113638867" loading="lazy"></p><p><img src="'+ji+'" alt="image-20231025113707572" loading="lazy"></p><p>新增套餐时需要录入套餐名称、所属分类、套餐价格、套餐包含的菜品、套餐图片、描述等信息。其中套餐包含的菜品需要在弹出的添加菜品窗口中勾选。在弹出的添加菜品窗口中需要按照分类来展示菜品。</p><p>新增套餐功能涉及到4个接口，分别是：</p><ul><li>根据类型查询分类 接口</li><li>根据分类查询菜品 接口</li><li>文件上传 接口</li><li>新增套餐 接口</li></ul><p>(1) 根据类型查询分类 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/category/list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>type</td><td>否</td><td>2</td><td>分类类型：1为菜品分类，2为套餐分类</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ sort</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ type</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(2) 根据分类查询菜品 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/dish/list</p><p><strong>Method：</strong> GET</p><p><strong>请求参数</strong></p><p><strong>Query</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>categoryId</td><td>是</td><td>101</td><td>分类id</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object []</td><td>非必须</td><td></td><td></td><td>item 类型: object</td></tr><tr><td>├─ categoryId</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ createTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ createUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ description</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>├─ image</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ name</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ price</td><td>number</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>├─ status</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>├─ updateTime</td><td>string</td><td>非必须</td><td></td><td></td><td>format: date-time</td></tr><tr><td>├─ updateUser</td><td>integer</td><td>非必须</td><td></td><td></td><td>format: int64</td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(3) 文件上传 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/common/upload</p><p><strong>Method：</strong> POST</p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>multipart/form-data</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数类型</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>file</td><td>file</td><td>是</td><td></td><td>文件</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>string</td><td>必须</td><td></td><td>文件上传路径</td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><p>(4) 新增套餐 接口</p><p><strong>基本信息</strong></p><p><strong>Path：</strong> /admin/setmeal</p><p><strong>Method：</strong> POST</p><p><strong>接口描述：</strong></p><p><strong>请求参数</strong></p><p><strong>Headers</strong></p><table tabindex="0"><thead><tr><th>参数名称</th><th>参数值</th><th>是否必须</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>Content-Type</td><td>application/json</td><td>是</td><td></td><td></td></tr></tbody></table><p><strong>Body</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>categoryId</td><td>integer</td><td>必须</td><td></td><td>分类id</td><td>format: int64</td></tr><tr><td>description</td><td>string</td><td>非必须</td><td></td><td>套餐描述</td><td></td></tr><tr><td>id</td><td>integer</td><td>非必须</td><td></td><td>套餐id</td><td>format: int64</td></tr><tr><td>image</td><td>string</td><td>必须</td><td></td><td>套餐图片</td><td></td></tr><tr><td>name</td><td>string</td><td>必须</td><td></td><td>套餐名称</td><td></td></tr><tr><td>price</td><td>number</td><td>必须</td><td></td><td>套餐价格</td><td></td></tr><tr><td>setmealDishes</td><td>object []</td><td>必须</td><td></td><td>套餐包含的菜品</td><td>item 类型: object</td></tr><tr><td>├─ copies</td><td>integer</td><td>必须</td><td></td><td>份数</td><td>format: int32</td></tr><tr><td>├─ dishId</td><td>integer</td><td>必须</td><td></td><td>菜品id</td><td>format: int64</td></tr><tr><td>├─ id</td><td>integer</td><td>非必须</td><td></td><td>套餐和菜品关系id</td><td>format: int64</td></tr><tr><td>├─ name</td><td>string</td><td>必须</td><td></td><td>菜品名称</td><td></td></tr><tr><td>├─ price</td><td>number</td><td>必须</td><td></td><td>菜品价格</td><td></td></tr><tr><td>├─ setmealId</td><td>integer</td><td>必须</td><td></td><td>套餐id</td><td>format: int64</td></tr><tr><td>status</td><td>integer</td><td>必须</td><td></td><td>套餐状态：1位起售 0为停售</td><td>format: int32</td></tr></tbody></table><p><strong>返回数据</strong></p><table tabindex="0"><thead><tr><th>名称</th><th>类型</th><th>是否必须</th><th>默认值</th><th>备注</th><th>其他信息</th></tr></thead><tbody><tr><td>code</td><td>integer</td><td>必须</td><td></td><td></td><td>format: int32</td></tr><tr><td>data</td><td>object</td><td>非必须</td><td></td><td></td><td></td></tr><tr><td>msg</td><td>string</td><td>非必须</td><td></td><td></td><td></td></tr></tbody></table><h3 id="_4-2-代码解读" tabindex="-1">4.2 代码解读 <a class="header-anchor" href="#_4-2-代码解读" aria-label="Permalink to &quot;4.2 代码解读&quot;">​</a></h3><p>新增套餐操作步骤：</p><p>①点击 “新建套餐”按钮，跳转到新增页面</p><p>②在新增套餐页面录入套餐相关信息</p><p>③点击“保存”按钮完成新增操作</p><p>首先需要找到新增套餐页面，可以通过操作过程来找：</p><p>第一步：在套餐管理列表页面中找到【新建套餐】按钮，查看按钮绑定的事件和对应的处理函数</p><p><img src="'+Ti+'" alt="image-20231026101005983" loading="lazy"></p><p>第二步：在methods中找到handleAdd函数，查看跳转的路由路径</p><p><img src="'+Vi+'" alt="image-20231026101037315" loading="lazy"></p><p>第三步：在路由文件中找到此路径对应的视图组件，可以看到是src/views/setmeal/addSetmeal.vue</p><p><img src="'+Si+'" alt="image-20231026101135442" loading="lazy"></p><p>第四步：解读src/views/setmeal/addSetmeal.vue这个文件即可</p><h3 id="_4-3-功能测试-1" tabindex="-1">4.3 功能测试 <a class="header-anchor" href="#_4-3-功能测试-1" aria-label="Permalink to &quot;4.3 功能测试&quot;">​</a></h3><p>直接进行前后端联调，查看页面效果</p><p>通过浏览器F12查看数据交互过程</p><h1 id="五、【nvm】适合小白的-nvm-安装配置教程-windows版" tabindex="-1">五、【nvm】适合小白的 nvm 安装配置教程（Windows版） <a class="header-anchor" href="#五、【nvm】适合小白的-nvm-安装配置教程-windows版" aria-label="Permalink to &quot;五、【nvm】适合小白的 nvm 安装配置教程（Windows版）&quot;">​</a></h1>',142)),n(t),s[10]||(s[10]=i('<h2 id="nvm-简介" tabindex="-1">nvm 简介 <a class="header-anchor" href="#nvm-简介" aria-label="Permalink to &quot;nvm 简介&quot;">​</a></h2><p><code>nvm</code> 全称为 <code>node.js version management</code>，顾名思义是用于管理多个 nodejs 的版本控制工具。通过 nvm 可以安装和切换不同版本的 nodejs。nvm 主要是为了解决 node.js 各种版本存在不兼容现象。</p><h2 id="一、nvm-的安装与配置" tabindex="-1">一、nvm 的安装与配置 <a class="header-anchor" href="#一、nvm-的安装与配置" aria-label="Permalink to &quot;一、nvm 的安装与配置&quot;">​</a></h2><h3 id="_1、install-nvm" tabindex="-1">1、install nvm <a class="header-anchor" href="#_1、install-nvm" aria-label="Permalink to &quot;1、install nvm&quot;">​</a></h3><p>🔎 <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noreferrer">nvm 官方下载地址</a>.</p><p>🔎 <a href="https://pan.baidu.com/s/1JDkl82Y44QQvchSn1q2A-Q?pwd=rnny" target="_blank" rel="noreferrer">nvm1.1.12 百度网盘地址</a>【不保证最新版本哈】.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224517457-1449501949.png" target="_blank" rel="noreferrer"><img src="'+wi+'" alt="image-20231117165521095" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224518015-1696008038.png" target="_blank" rel="noreferrer"><img src="'+Ni+'" alt="image-20231117105855047" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224518442-811187715.png" target="_blank" rel="noreferrer"><img src="'+Ii+`" alt="image-20231117110141183" loading="lazy"></a>.</p><h3 id="_2、base-command【主要验证-nvm-是否安装成功】" tabindex="-1">2、<mark>base command【主要验证 nvm 是否安装成功】</mark> <a class="header-anchor" href="#_2、base-command【主要验证-nvm-是否安装成功】" aria-label="Permalink to &quot;2、==base command【主要验证 nvm 是否安装成功】==&quot;">​</a></h3><blockquote><p>architecture：架构</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 nvm 版本，version 可简写成 小v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> version</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> v</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示 node 是运行在 32 位还是 64 位</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> arch</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224519111-1315815885.png" target="_blank" rel="noreferrer"><img src="`+Ui+`" alt="image-20231116104021164" loading="lazy"></a>.</p><blockquote><p><mark>重头戏来啦</mark></p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示已经安装的列表，list 可简化为 ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 显示远程可安装的列表，list 也可简化为 ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 卸载指定版本 node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> uninstall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [version]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 使用指定版本 node</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [version]</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224519481-1123754033.png" target="_blank" rel="noreferrer"><img src="`+Mi+'" alt="image-20231116105530304" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224519932-639034536.png" target="_blank" rel="noreferrer"><img src="'+Ri+`" alt="image-20231116105919918" loading="lazy"></a>.</p><blockquote><p>玩玩就好了，基本不会用到</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 开启 node.js 版本管理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 关闭 node.js 版本管理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> off</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224520489-2101089879.png" target="_blank" rel="noreferrer"><img src="`+Ji+`" alt="image-20231116104926531" loading="lazy"></a>.</p><h3 id="_3、configure-taobao-mirror【配置下载镜像】" tabindex="-1">3、configure taobao mirror【配置下载镜像】 <a class="header-anchor" href="#_3、configure-taobao-mirror【配置下载镜像】" aria-label="Permalink to &quot;3、configure taobao mirror【配置下载镜像】&quot;">​</a></h3><p>在 <code>nvm</code> 的安装路径下，找到 <code>settings.txt</code>，在后面加上这两行，设置国内淘宝镜像源：</p><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">node_mirror: https://npmmirror.com/mirrors/node/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">npm_mirror: https://npmmirror.com/mirrors/npm/</span></span></code></pre></div><p><strong>提醒</strong>： <a href="https://developer.aliyun.com/mirror/" target="_blank" rel="noreferrer">阿里云开源镜像站</a>： <a href="https://npm.taobao.org/%E3%80%90%E8%AF%A5%E5%9F%9F%E5%90%8D%E5%9C%A8" target="_blank" rel="noreferrer">https://npm.taobao.org/【该域名在</a> 2022.06.30 号正式下线和停止 DNS 解析，新域名<a href="https://developer.aliyun.com/mirror/NPM" target="_blank" rel="noreferrer">npmmirror.com</a>】</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224520880-657070733.png" target="_blank" rel="noreferrer"><img src="`+Li+'" alt="image-20231116110240298" loading="lazy"></a>.</p><p><a href="https://img2024.cnblogs.com/blog/2883139/202403/2883139-20240326110949684-1417340981.png" target="_blank" rel="noreferrer"><img src="'+Hi+`" alt="image-20240202205301489" loading="lazy"></a>.</p><blockquote><p>问题：为什么要配置镜像？</p><p>答：配置完国内的镜像后，npm install xxx 的下载速度会很快！</p></blockquote><h2 id="二、node-的安装与配置" tabindex="-1">二、node 的安装与配置 <a class="header-anchor" href="#二、node-的安装与配置" aria-label="Permalink to &quot;二、node 的安装与配置&quot;">​</a></h2><h3 id="_1、install-node" tabindex="-1">1、install node <a class="header-anchor" href="#_1、install-node" aria-label="Permalink to &quot;1、install node&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> available</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nvm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> use</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 16</span></span></code></pre></div><blockquote><p>小提示：不要安装 node 的奇数版本！LTS 一般就是偶数版本。</p></blockquote><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224521734-2133276040.png" target="_blank" rel="noreferrer"><img src="`+Oi+'" alt="image-20231116111322142" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224522142-98357226.png" target="_blank" rel="noreferrer"><img src="'+Qi+'" alt="image-20231117090853114" loading="lazy"></a>.</p><h3 id="_2、修改-npm-默认镜像源【新增内容】" tabindex="-1">2、修改 npm 默认镜像源【新增内容】 <a class="header-anchor" href="#_2、修改-npm-默认镜像源【新增内容】" aria-label="Permalink to &quot;2、修改 npm 默认镜像源【新增内容】&quot;">​</a></h3><h4 id="方式一-手动修改" tabindex="-1">方式一：手动修改 <a class="header-anchor" href="#方式一-手动修改" aria-label="Permalink to &quot;方式一：手动修改&quot;">​</a></h4><ol><li>修改 <code>npm</code> 镜像源为淘宝镜像源</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://registry.npmmirror.com</span></span></code></pre></div><ol><li>检查是否成功</li></ol><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> registry</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224521266-1240624336.png" target="_blank" rel="noreferrer"><img src="'+$i+'" alt="image-20240202212343592" loading="lazy"></a>.</p><h4 id="方式二-安装-nrm" tabindex="-1">方式二：安装 nrm <a class="header-anchor" href="#方式二-安装-nrm" aria-label="Permalink to &quot;方式二：安装 nrm&quot;">​</a></h4><p><strong>前提</strong>：需要先安装 <code>node</code>。 请参考下 <a href="https://www.cnblogs.com/rnny/p/18004162" target="_blank" rel="noreferrer">nrm 安装使用教程</a> 这篇文章.</p><h3 id="_3、配置-node-的-prefix-全局路径-和-cache-缓存路径" tabindex="-1">3、配置 node 的 prefix（全局路径）和 cache（缓存路径） <a class="header-anchor" href="#_3、配置-node-的-prefix-全局路径-和-cache-缓存路径" aria-label="Permalink to &quot;3、配置 node 的 prefix（全局路径）和 cache（缓存路径）&quot;">​</a></h3><h4 id="_3-1、【非必须-可直接跳过】选择需要使用的-node-版本-新建两个文件夹" tabindex="-1">3.1、【非必须，可直接跳过】选择需要使用的 node 版本，新建两个文件夹 <a class="header-anchor" href="#_3-1、【非必须-可直接跳过】选择需要使用的-node-版本-新建两个文件夹" aria-label="Permalink to &quot;3.1、【非必须，可直接跳过】选择需要使用的 node 版本，新建两个文件夹&quot;">​</a></h4><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224522486-1074673816.png" target="_blank" rel="noreferrer"><img src="'+Wi+'" alt="image-20231116132013883" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224522803-240960905.png" target="_blank" rel="noreferrer"><img src="'+Yi+`" alt="image-20231116132131610" loading="lazy"></a>.</p><blockquote><p>每次使用 nvm 安装 node 都需要手动创建这两个文件夹吗？</p><p>答：并不是每次都需要自己手动创建，但是第一次推荐你手动创建，以后当你设置 prefix 和 cache 后，系统会自动创建。</p></blockquote><p><code>node_global</code>：npm install 下载的全局插件</p><p><code>node_cache</code>：node 的缓存</p><h4 id="_3-2、【关键】设置全局模板-prefix-和缓存文件-cache-的存放路径" tabindex="-1">3.2、【关键】设置全局模板（prefix）和缓存文件（cache）的存放路径： <a class="header-anchor" href="#_3-2、【关键】设置全局模板-prefix-和缓存文件-cache-的存放路径" aria-label="Permalink to &quot;3.2、【关键】设置全局模板（prefix）和缓存文件（cache）的存放路径：&quot;">​</a></h4><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm config set cache &quot;%NVM_SYMLINK%\\node_cache&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cache</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;D:\\nvm\\nodejs\\node_cache&quot;</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># npm config set prefix &quot;%NVM_SYMLINK%\\node_global&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> prefix</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;D:\\nvm\\nodejs\\node_global&quot;</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 可编辑 .npmrc 配置文件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> edit</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看部分 .npmrc 配置信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224523131-155785595.png" target="_blank" rel="noreferrer"><img src="`+Gi+'" alt="image-20231116133715188" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224523480-819844066.png" target="_blank" rel="noreferrer"><img src="'+Ki+'" alt="image-20231116133858389" loading="lazy"></a>.</p><blockquote><p>注意：</p></blockquote><ol><li>引号里面换自己的路径</li><li>引号里面的路径是软链接（<code>nodejs</code>）的路径</li></ol><blockquote><p>每次使用 nvm 安装 node 都需要配置 prefix 和 cache 吗？</p><p>答：并不需要每次都设置。配置的 prefix 和 cache 的信息都在 <code>C:\\Users\\zhuang\\.npmrc</code> 文件里</p></blockquote><h3 id="_4、配置-node-环境变量-通用配置-仅需一次配置" tabindex="-1">4、配置 node 环境变量（通用配置，仅需一次配置） <a class="header-anchor" href="#_4、配置-node-环境变量-通用配置-仅需一次配置" aria-label="Permalink to &quot;4、配置 node 环境变量（通用配置，仅需一次配置）&quot;">​</a></h3><h4 id="版本一-【推荐】简单" tabindex="-1">版本一：【推荐】简单 <a class="header-anchor" href="#版本一-【推荐】简单" aria-label="Permalink to &quot;版本一：【推荐】简单&quot;">​</a></h4><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224523823-251045790.png" target="_blank" rel="noreferrer"><img src="'+Xi+'" alt="image-20231117125538903" loading="lazy"></a>.</p><h4 id="版本二-【跳过就行】复杂" tabindex="-1">版本二：【跳过就行】复杂 <a class="header-anchor" href="#版本二-【跳过就行】复杂" aria-label="Permalink to &quot;版本二：【跳过就行】复杂&quot;">​</a></h4><blockquote><p>问题：每次使用 nvm 安装 node 都需要配置环境变量吗？</p><p>答：配置时多注意注意 NODE_PATH 值的配置就可以避免多次配置环境变量。不然每次更换 node 都需要配置环境变量。</p></blockquote><p><code>NVM_HOME</code>：nvm 地址目录</p><p><code>NVM_SYMLINK</code>：nvm 配置 nodejs 的软链接，<code>nvm use 版本号</code> 时会自动创建</p><blockquote><p>安装 nvm 时 <code>NVM_HOME</code> 和 <code>NVM_SYMLINK</code> 一般会自动配置上，不需要我们手动配置，非常舒心！</p></blockquote><p><code>NODE_PATH</code>：需要万分注意！！！，格式是：<code>NVM_SYMLINK</code> 路径 + <code>\\node_global</code>。</p><p>这样配置的话你就只需要配置一次，以后切换其他版本的 node 时也不需要重新配置 <code>NODE_PATH</code> 环境变量，方便使用。</p><blockquote><p>注意：下图中 NODE_PATH 的值需要手动配置，其中 %NVM_SYMLINK% 需要换上具体的值，然后加上 <code>\\node_global</code></p></blockquote><p>eg. 我的 <code>NODE_PATH</code> 配置为</p><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">D:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\nvm\\nodejs\\node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_global</span></span></code></pre></div><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224524190-743366549.png" target="_blank" rel="noreferrer"><img src="'+Zi+'" alt="image-20231117102641335" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224524559-856280039.png" target="_blank" rel="noreferrer"><img src="'+sa+`" alt="image-20231117125804868" loading="lazy"></a>.</p><h3 id="_5、配置完成后-输入以下命令进行验证" tabindex="-1">5、配置完成后，输入以下命令进行验证 <a class="header-anchor" href="#_5、配置完成后-输入以下命令进行验证" aria-label="Permalink to &quot;5、配置完成后，输入以下命令进行验证&quot;">​</a></h3><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 node 版本，若返回版本号，node 可用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 查看 npm 版本，若返回版本号，npm 可用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span></code></pre></div><p>如果返回了相应的版本号，则证明成功。</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224524993-67991871.png" target="_blank" rel="noreferrer"><img src="`+ia+'" alt="image-20231116131617422" loading="lazy"></a>.</p><h2 id="三、【选学】扩展-nvm-如何实现-node-任意切换" tabindex="-1">三、【选学】扩展：nvm 如何实现 node 任意切换 <a class="header-anchor" href="#三、【选学】扩展-nvm-如何实现-node-任意切换" aria-label="Permalink to &quot;三、【选学】扩展：nvm 如何实现 node 任意切换&quot;">​</a></h2><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224525845-165962797.png" target="_blank" rel="noreferrer"><img src="'+aa+'" alt="image-20231117104701081" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224526247-1334937302.png" target="_blank" rel="noreferrer"><img src="'+ta+'" alt="image-20231117105022521" loading="lazy"></a>.</p><p><a href="https://img2023.cnblogs.com/blog/2883139/202402/2883139-20240202224526680-1616470130.png" target="_blank" rel="noreferrer"><img src="'+na+'" alt="image-20231117105328963" loading="lazy"></a></p>',83))])}const ga=e(la,[["render",pa]]);export{Ea as __pageData,ga as default};
