import{_ as p,C as h,c as k,o as e,j as i,G as n,ag as t,a as l}from"./chunks/framework.Ds6Eueu6.js";const r="/assets/image-20250322162707732.CHyHDj4s.png",g="/assets/image-20230804154314553.CxjRA23p.png",E="/assets/image-20230804154331883.CPXnJCTT.png",d="/assets/image-20230804154548680.DTxJ3-P7.png",o="/assets/image-20230804154930796.DssLQ_qe.png",y="/assets/image-20250322163654323.CpEjus6V.png",c="/assets/image-20250322163758431.C0lbAQGu.png",A="/assets/image-20250322164606814.BRJ8fpz6.png",D="/assets/image-20250322164651183.DRDyhpXR.png",F="/assets/image-20250322164833776.Bg7yIo5L.png",u="/assets/image-20250322164757570.B_TUDvcR.png",m="/assets/image-20250322164939045.rsCQ05sA.png",_="/assets/image-20250322164946077.B5BQimOA.png",b="/assets/image-20250322165509725.1U9euszm.png",v="/assets/image-20250322165608785.DRe3ZWU5.png",C="/assets/image-20250322165312165.CnivkYx-.png",R=JSON.parse('{"title":"注解","description":"","frontmatter":{},"headers":[],"relativePath":"Java基础/注解/注解-Local.md","filePath":"Java基础/注解/注解-Local.md","lastUpdated":1744204135000}'),q={name:"Java基础/注解/注解-Local.md"};function T(B,s,f,P,S,x){const a=h("ArticleMetadata");return e(),k("div",null,[s[0]||(s[0]=i("h1",{id:"注解",tabindex:"-1"},[l("注解 "),i("a",{class:"header-anchor",href:"#注解","aria-label":'Permalink to "注解"'},"​")],-1)),n(a),s[1]||(s[1]=i("h1",{id:"一、注解的概述",tabindex:"-1"},[l("一、注解的概述 "),i("a",{class:"header-anchor",href:"#一、注解的概述","aria-label":'Permalink to "一、注解的概述"'},"​")],-1)),n(a),s[2]||(s[2]=t('<h2 id="_1、什么是注解" tabindex="-1">1、什么是注解 <a class="header-anchor" href="#_1、什么是注解" aria-label="Permalink to &quot;1、什么是注解&quot;">​</a></h2><p><img src="'+r+'" alt="image-20250322162707732" loading="lazy"></p><h2 id="_2、注解的理解" tabindex="-1">2、注解的理解 <a class="header-anchor" href="#_2、注解的理解" aria-label="Permalink to &quot;2、注解的理解&quot;">​</a></h2><ol><li><strong>注解(Annotation)<strong>也被称为元数据(Metadata)，用于修饰解释 包、类、方法、属性、构造器、局部变量等</strong>数据信息</strong>。</li><li>和注释一样，注解不影响程序逻辑，但<strong>注解可以被编译或运行</strong>，相当于<strong>嵌入在代码中的补充信息</strong>。</li><li>在 <strong>JavaSE</strong> 中，注解的使用目的比较简单，例如<strong>标记过时的功能，忽略警告</strong>等。在 <strong>JavaEE</strong> 中注解占据了更重要的角色，例如用来配置应用程序的任何切面，<strong>代替 java EE 旧版中所遗留的繁冗代码和 XML 配置等</strong>。</li></ol><h1 id="二、基本的注解" tabindex="-1">二、<mark>基本的注解</mark> <a class="header-anchor" href="#二、基本的注解" aria-label="Permalink to &quot;二、==基本的注解==&quot;">​</a></h1>',5)),n(a),s[3]||(s[3]=t('<h2 id="_1、三种基本的注解介绍" tabindex="-1">1、三种基本的注解介绍 <a class="header-anchor" href="#_1、三种基本的注解介绍" aria-label="Permalink to &quot;1、三种基本的注解介绍&quot;">​</a></h2><p>使用 Annotation 时要在其前面增加 <strong>@ 符号</strong>, 并把<strong>该 Annotation 当成一个修饰符使用</strong>。用于修饰它支持的程序元素；</p><p>​ 三个基本的 Annotation:</p><ul><li><strong>@Override</strong>: 限定某个方法，是<strong>重写父类方法</strong>, 该注解<strong>只能用于方法</strong>；</li><li><strong>@Deprecated</strong>: 用于表示某个程序元素(类, 方法等)<strong>已过时；</strong></li><li><strong>@SuppressWarnings</strong>: <strong>抑制编译器警告</strong> （常用==<strong>@SuppressWarnings({&quot;all&quot;})</strong>,来抑制<strong>所有类型的警告</strong>；==）</li></ul><h2 id="_2、第三方框架的注解-juint" tabindex="-1">2、第三方框架的注解-JUint <a class="header-anchor" href="#_2、第三方框架的注解-juint" aria-label="Permalink to &quot;2、第三方框架的注解-JUint&quot;">​</a></h2><p>除此之外，还需要掌握第三方框架中提供的注解：</p><p>比如：Junit</p><ul><li><p>@Test 表示运行测试方法</p></li><li><p>@Before 表示在Test之前运行，进行数据的初始化</p></li><li><p>@After 表示在Test之后运行，进行数据的还原</p></li></ul><h2 id="_3、-override-重写" tabindex="-1">3、<strong><mark>@Override</mark></strong>-重写 <a class="header-anchor" href="#_3、-override-重写" aria-label="Permalink to &quot;3、**==@Override==**-重写&quot;">​</a></h2><p><img src="'+g+'" alt="image-20230804154314553" loading="lazy"></p><p><img src="'+E+'" alt="image-20230804154331883" loading="lazy"></p><h2 id="_4、-deprecated-过时" tabindex="-1">4、<mark>@Deprecated</mark>-过时 <a class="header-anchor" href="#_4、-deprecated-过时" aria-label="Permalink to &quot;4、==@Deprecated==-过时&quot;">​</a></h2><p><img src="'+d+`" alt="img" loading="lazy"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Deprecated_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        A a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.n1);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//1. @Deprecated 修饰某个元素, 表示该元素已经过时</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//2. 即不在推荐使用，但是仍然可以使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//3. 查看 @Deprecated 注解类的源码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//4. 可以修饰方法，类，字段, 包, 参数 等等</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//5. @Deprecated 可以做版本升级过渡使用</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          @Documented</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          @Retention(RetentionPolicy.RUNTIME)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          @Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER,                  TYPE})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          public @interface Deprecated {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Deprecated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Deprecated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Deprecated</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_5、-suppresswarnings-抑制警告" tabindex="-1">5、<mark>@SuppressWarnings</mark>-抑制警告 <a class="header-anchor" href="#_5、-suppresswarnings-抑制警告" aria-label="Permalink to &quot;5、==@SuppressWarnings==-抑制警告&quot;">​</a></h2><ol><li><p>当我们不希望看到这些警告的时候，可以使用 SuppressWarnings 注解来抑制警告信息</p></li><li><p>在 {&quot; &quot;} 中，可以写入你希望抑制(不显示)警告信息</p><p>3.常用**@SuppressWarnings({&quot;all&quot;})<strong>,来抑制</strong>所有类型的警告**；</p></li></ol><p><img src="`+o+'" alt="image-20230804154930796" loading="lazy"></p><h2 id="_6、jdk的元annotation-元注解" tabindex="-1">6、JDK的元Annotation(<mark>元注解</mark>) <a class="header-anchor" href="#_6、jdk的元annotation-元注解" aria-label="Permalink to &quot;6、JDK的元Annotation(==元注解==)&quot;">​</a></h2><p>​ JDK 的元 Annotation <mark>用于<strong>修饰</strong>其他 Annotation<strong>元注解</strong></mark>： 本身作用不大，看源码时，可以知道他是干什么.</p><ol><li><strong>@Retention</strong> //<strong>指定注解的作用范围</strong>，三种 SOURCE,CLASS,RUNTIME</li><li><strong>@Target</strong> // 指定注解可以<strong>在哪些地方使用</strong></li><li><strong>@Documented</strong> //指定该注解<strong>是否会在 javadoc 体现</strong></li><li><strong>@Inherited</strong> //<strong>子类会继承父类注解</strong></li></ol><h1 id="三、自定义注解" tabindex="-1">三、<mark><em>自定义注解</em></mark> <a class="header-anchor" href="#三、自定义注解" aria-label="Permalink to &quot;三、==*自定义注解*==&quot;">​</a></h1>',21)),n(a),s[4]||(s[4]=t('<h2 id="_1、自定义注解的格式" tabindex="-1">1、自定义注解的格式 <a class="header-anchor" href="#_1、自定义注解的格式" aria-label="Permalink to &quot;1、自定义注解的格式&quot;">​</a></h2><p><img src="'+y+'" alt="image-20250322163654323" loading="lazy"></p><h2 id="_2、自定义注解和使用" tabindex="-1">2、自定义注解和<mark>使用</mark> <a class="header-anchor" href="#_2、自定义注解和使用" aria-label="Permalink to &quot;2、自定义注解和==使用==&quot;">​</a></h2><p><img src="'+c+`" alt="image-20250322163758431" loading="lazy"></p><h3 id="_1-代码实例" tabindex="-1">（1）代码实例 <a class="header-anchor" href="#_1-代码实例" aria-label="Permalink to &quot;（1）代码实例&quot;">​</a></h3><p><strong>自定义注解-Demo1</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationdemo1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 自定义注解</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 注解本质是一个接口继承了Annotation接口，调用注解类实际上就是创建了Annotation接口的实现类</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 注解中的属性都是抽象方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AnnotationDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aaa</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //提供默认值 default</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ccc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>自定义注解-Demo2</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationdemo1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    如果注解中只有一个属性value() 特殊属性，value可以省略不写</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AnnotationDemo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>使用注解</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationdemo1;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注解中的属性必须全部添加，除非有默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AnnotationDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aaa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;张三&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JAVA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnnotationClassDemo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AnnotationDemo1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aaa</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;李四&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ccc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;运维&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;测试&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AnnotationDemo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;王五&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果注解中只有一个属性value() 特殊属性，value可以省略不写</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-特殊属性-value" tabindex="-1">（2）特殊属性-value <a class="header-anchor" href="#_2-特殊属性-value" aria-label="Permalink to &quot;（2）特殊属性-value&quot;">​</a></h3><p><strong>value：</strong></p><p>​ <strong>当注解中<mark>只有&quot;一个属性&quot;,并且属性名是&quot;value&quot;</mark>,使用注解时,可以<mark>省略value属性名</mark></strong></p><p>代码示例：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注解的定义</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> Anno2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//注解的使用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Anno2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnnoDemo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Anno2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="四、元注解" tabindex="-1">四、<mark><em>元注解</em></mark> <a class="header-anchor" href="#四、元注解" aria-label="Permalink to &quot;四、==*元注解*==&quot;">​</a></h1>`,17)),n(a),s[5]||(s[5]=t('<p><img src="'+A+'" alt="image-20250322164606814" loading="lazy"></p><h2 id="_1、jdk的元annotation-元注解" tabindex="-1">1、JDK的元Annotation(<mark>元注解</mark>) <a class="header-anchor" href="#_1、jdk的元annotation-元注解" aria-label="Permalink to &quot;1、JDK的元Annotation(==元注解==)&quot;">​</a></h2><p>​ JDK 的元 Annotation <mark>用于<strong>修饰</strong>其他 Annotation<strong>元注解</strong></mark>： 本身作用不大，看源码时，可以知道他是干什么.</p><ol><li><strong>@Retention</strong> //<strong>指定注解的作用范围</strong>，三种 SOURCE,CLASS,RUNTIME</li><li><strong>@Target</strong> // 指定注解可以<strong>在哪些地方使用</strong></li><li><strong>@Documented</strong> //指定该注解<strong>是否会在 javadoc 体现</strong></li><li><strong>@Inherited</strong> //<strong>子类会继承父类注解</strong></li></ol><p><img src="'+D+'" alt="image-20250322164651183" loading="lazy"></p><h2 id="_2、-retention-指定作用阶段" tabindex="-1">2、@<mark>Retention</mark>-指定作用阶段 <a class="header-anchor" href="#_2、-retention-指定作用阶段" aria-label="Permalink to &quot;2、@==Retention==-指定作用阶段&quot;">​</a></h2><p><strong>@Retention</strong> //<strong>指定注解的作用范围</strong>，三种 SOURCE,CLASS,RUNTIME</p><p><img src="'+F+'" alt="image-20250322164833776" loading="lazy"></p><p><img src="'+u+'" alt="image-20250322164757570" loading="lazy"></p><h2 id="_3、-target-指定作用位置" tabindex="-1">3、@<mark>Target</mark>-指定作用位置 <a class="header-anchor" href="#_3、-target-指定作用位置" aria-label="Permalink to &quot;3、@==Target==-指定作用位置&quot;">​</a></h2><p><img src="'+m+'" alt="image-20250322164939045" loading="lazy"></p><p><img src="'+_+`" alt="image-20250322164946077" loading="lazy"></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationdemo2;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    TODO 元注解：修饰注解的注解</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.TYPE) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//当前被修饰的注解只能用在类上</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//控制下面的注解一直保留到运行时</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> AnootationDemo2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="五、注解解析和应用场景" tabindex="-1">五、<mark>注解解析</mark>和<mark>应用场景</mark> <a class="header-anchor" href="#五、注解解析和应用场景" aria-label="Permalink to &quot;五、==注解解析==和==应用场景==&quot;">​</a></h1>`,14)),n(a),s[6]||(s[6]=t('<h2 id="_1、注解的解析" tabindex="-1">1、注解的解析 <a class="header-anchor" href="#_1、注解的解析" aria-label="Permalink to &quot;1、注解的解析&quot;">​</a></h2><p><img src="'+b+'" alt="image-20250322165509725" loading="lazy"></p><h2 id="_2、解析注解的技巧" tabindex="-1">2、解析注解的技巧 <a class="header-anchor" href="#_2、解析注解的技巧" aria-label="Permalink to &quot;2、解析注解的技巧&quot;">​</a></h2><p><img src="'+v+'" alt="image-20250322165608785" loading="lazy"></p><h2 id="_3、案例-模拟junit框架" tabindex="-1">3、案例-模拟JUnit框架 <a class="header-anchor" href="#_3、案例-模拟junit框架" aria-label="Permalink to &quot;3、案例-模拟JUnit框架&quot;">​</a></h2><p><img src="'+C+`" alt="image-20250322165312165" loading="lazy"></p><p><strong>MyTest</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationtest1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.ElementType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.Retention;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.RetentionPolicy;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.annotation.Target;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示着我们的注解可以写在方法上面，其他地方不能写</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.METHOD) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注解只能注解方法</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//表示着我们的注解可以在任意时期都存在。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//如果写source，那么只能在源码阶段存在，利用反射无法解析</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RetentionPolicy.RUNTIME) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 让当前注解可以一直存活着</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> MyTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>测试类</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> com.pyw.a82annotation.annotationtest1;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.InvocationTargetException;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.lang.reflect.Method;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    需求：模拟Junit框架的设计</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //表示程序运行时自动运行test2，test4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    @MyTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;============test1============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;============test2============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    @MyTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;============test3============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">MyTest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;============test4============&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><p><strong>利用反射解析注解</strong></p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//模拟Test启动程序</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) throws InvocationTargetException, IllegalAccessException {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //1.得到class对象</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Class clazz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Test.class;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Class clazz = Class.forName(&quot;com.itheima.demo1.Test&quot;);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //提取全部成员方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] methods </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMethods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //遍历数组中的每个方法，方法上是否存在@MyTest注解</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //存在：触发执行方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Method method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> methods) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //4.临时修改权限,可能是私有的成员方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAccessible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //是否存在@MyTest注解</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isAnnotationPresent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTest.class)){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //存在：触发执行方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h1 id="六、小结" tabindex="-1">六、小结 <a class="header-anchor" href="#六、小结" aria-label="Permalink to &quot;六、小结&quot;">​</a></h1>`,14)),n(a),s[7]||(s[7]=i("p",null,"掌握如何使用已经存在的注解即可。",-1)),s[8]||(s[8]=i("ul",null,[i("li",null,[i("p",null,"@Override：表示方法的重写")]),i("li",null,[i("p",null,"@Deprecated：表示修饰的方法已过时")]),i("li",null,[i("p",null,'@SuppressWarnings("all")：压制警告')]),i("li",null,[i("p",null,"@Test：表示要运行的方法")])],-1)),s[9]||(s[9]=i("p",null,"在以后的实际开发中，注解是使用框架已经提供好的注解。",-1)),s[10]||(s[10]=i("p",null,"**自定义注解+解析注解，一般会出现在框架的底层。**当以后我们要自己写一个框架的时候，才会用到自定义注解+解析注解。",-1))])}const M=p(q,[["render",T]]);export{R as __pageData,M as default};
